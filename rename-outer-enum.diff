diff --git a/.github/workflows/auto-label-prs.yml b/.github/workflows/auto-label-prs.yml
index f0b8e9b343e..50539b80b98 100644
--- a/.github/workflows/auto-label-prs.yml
+++ b/.github/workflows/auto-label-prs.yml
@@ -8,13 +8,13 @@ jobs:
     runs-on: ubuntu-latest
     steps:
       - name: Label drafts
-        uses: andymckay/labeler@master
+        uses: andymckay/labeler@e6c4322d0397f3240f0e7e30a33b5c5df2d39e90 # 1.0.4
         if: github.event.pull_request.draft == true
         with:
           add-labels: 'A3-inprogress'
           remove-labels: 'A0-pleasereview'
       - name: Label PRs
-        uses: andymckay/labeler@master
+        uses: andymckay/labeler@e6c4322d0397f3240f0e7e30a33b5c5df2d39e90 # 1.0.4
         if: github.event.pull_request.draft == false && ! contains(github.event.pull_request.labels.*.name, 'A2-insubstantial')
         with:
           add-labels: 'A0-pleasereview'
diff --git a/.github/workflows/release-10_candidate.yml b/.github/workflows/release-10_candidate.yml
index 51a82bc4f59..acffa6842d4 100644
--- a/.github/workflows/release-10_candidate.yml
+++ b/.github/workflows/release-10_candidate.yml
@@ -34,7 +34,7 @@ jobs:
             echo "::set-output name=first_rc::true"
           fi
       - name: Apply new tag
-        uses: tvdias/github-tagger@v0.0.2
+        uses: tvdias/github-tagger@ed7350546e3e503b5e942dffd65bc8751a95e49d # v0.0.2
         with:
           # We can't use the normal GITHUB_TOKEN for the following reason:
           # https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
@@ -42,7 +42,7 @@ jobs:
           repo-token: "${{ secrets.RELEASE_BRANCH_TOKEN }}"
           tag: ${{ steps.compute_tag.outputs.new_tag }}
       - id: create-issue
-        uses: JasonEtco/create-an-issue@v2
+        uses: JasonEtco/create-an-issue@9e6213aec58987fa7d2f4deb8b256b99e63107a2 # v2.6.0
         # Only create the issue if it's the first release candidate
         if: steps.compute_tag.outputs.first_rc == 'true'
         env:
diff --git a/Cargo.lock b/Cargo.lock
index 0f65ff847ee..13743f95a97 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -423,7 +423,7 @@ dependencies = [
 [[package]]
 name = "beefy-gadget"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "beefy-primitives",
@@ -459,7 +459,7 @@ dependencies = [
 [[package]]
 name = "beefy-gadget-rpc"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "beefy-gadget",
  "beefy-primitives",
@@ -479,7 +479,7 @@ dependencies = [
 [[package]]
 name = "beefy-merkle-tree"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "beefy-primitives",
  "sp-api",
@@ -488,7 +488,7 @@ dependencies = [
 [[package]]
 name = "beefy-primitives"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -1974,7 +1974,7 @@ checksum = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"
 [[package]]
 name = "fork-tree"
 version = "3.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
 ]
@@ -1992,7 +1992,7 @@ dependencies = [
 [[package]]
 name = "frame-benchmarking"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -2015,7 +2015,7 @@ dependencies = [
 [[package]]
 name = "frame-benchmarking-cli"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "Inflector",
  "chrono",
@@ -2066,7 +2066,7 @@ dependencies = [
 [[package]]
 name = "frame-election-provider-solution-type"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro-crate",
  "proc-macro2",
@@ -2077,7 +2077,7 @@ dependencies = [
 [[package]]
 name = "frame-election-provider-support"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-election-provider-solution-type",
  "frame-support",
@@ -2093,7 +2093,7 @@ dependencies = [
 [[package]]
 name = "frame-executive"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -2121,7 +2121,7 @@ dependencies = [
 [[package]]
 name = "frame-support"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "bitflags",
  "frame-metadata",
@@ -2152,7 +2152,7 @@ dependencies = [
 [[package]]
 name = "frame-support-procedural"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "Inflector",
  "frame-support-procedural-tools",
@@ -2164,7 +2164,7 @@ dependencies = [
 [[package]]
 name = "frame-support-procedural-tools"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support-procedural-tools-derive",
  "proc-macro-crate",
@@ -2176,7 +2176,7 @@ dependencies = [
 [[package]]
 name = "frame-support-procedural-tools-derive"
 version = "3.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -2186,7 +2186,7 @@ dependencies = [
 [[package]]
 name = "frame-support-test"
 version = "3.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-support-test-pallet",
@@ -2209,7 +2209,7 @@ dependencies = [
 [[package]]
 name = "frame-support-test-pallet"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -2220,7 +2220,7 @@ dependencies = [
 [[package]]
 name = "frame-system"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "log",
@@ -2237,7 +2237,7 @@ dependencies = [
 [[package]]
 name = "frame-system-benchmarking"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -2252,7 +2252,7 @@ dependencies = [
 [[package]]
 name = "frame-system-rpc-runtime-api"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "sp-api",
@@ -2261,7 +2261,7 @@ dependencies = [
 [[package]]
 name = "frame-try-runtime"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "sp-api",
@@ -2443,7 +2443,7 @@ dependencies = [
 [[package]]
 name = "generate-bags"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "chrono",
  "frame-election-provider-support",
@@ -4816,7 +4816,7 @@ checksum = "20448fd678ec04e6ea15bbe0476874af65e98a01515d667aa49f1434dc44ebf4"
 [[package]]
 name = "pallet-assets"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -4830,7 +4830,7 @@ dependencies = [
 [[package]]
 name = "pallet-authority-discovery"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -4846,7 +4846,7 @@ dependencies = [
 [[package]]
 name = "pallet-authorship"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -4861,7 +4861,7 @@ dependencies = [
 [[package]]
 name = "pallet-babe"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -4885,7 +4885,7 @@ dependencies = [
 [[package]]
 name = "pallet-bags-list"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-election-provider-support",
@@ -4905,7 +4905,7 @@ dependencies = [
 [[package]]
 name = "pallet-bags-list-remote-tests"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-election-provider-support",
  "frame-support",
@@ -4924,7 +4924,7 @@ dependencies = [
 [[package]]
 name = "pallet-balances"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -4939,7 +4939,7 @@ dependencies = [
 [[package]]
 name = "pallet-beefy"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "beefy-primitives",
  "frame-support",
@@ -4955,7 +4955,7 @@ dependencies = [
 [[package]]
 name = "pallet-beefy-mmr"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "beefy-merkle-tree",
  "beefy-primitives",
@@ -4978,7 +4978,7 @@ dependencies = [
 [[package]]
 name = "pallet-bounties"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -4996,7 +4996,7 @@ dependencies = [
 [[package]]
 name = "pallet-child-bounties"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5015,7 +5015,7 @@ dependencies = [
 [[package]]
 name = "pallet-collective"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5032,7 +5032,7 @@ dependencies = [
 [[package]]
 name = "pallet-democracy"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5048,7 +5048,7 @@ dependencies = [
 [[package]]
 name = "pallet-election-provider-multi-phase"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-election-provider-support",
@@ -5071,7 +5071,7 @@ dependencies = [
 [[package]]
 name = "pallet-election-provider-support-benchmarking"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-election-provider-support",
@@ -5084,7 +5084,7 @@ dependencies = [
 [[package]]
 name = "pallet-elections-phragmen"
 version = "5.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5102,7 +5102,7 @@ dependencies = [
 [[package]]
 name = "pallet-gilt"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5117,7 +5117,7 @@ dependencies = [
 [[package]]
 name = "pallet-grandpa"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5140,7 +5140,7 @@ dependencies = [
 [[package]]
 name = "pallet-identity"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "enumflags2",
  "frame-benchmarking",
@@ -5156,7 +5156,7 @@ dependencies = [
 [[package]]
 name = "pallet-im-online"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5176,7 +5176,7 @@ dependencies = [
 [[package]]
 name = "pallet-indices"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5193,7 +5193,7 @@ dependencies = [
 [[package]]
 name = "pallet-membership"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5210,7 +5210,7 @@ dependencies = [
 [[package]]
 name = "pallet-mmr"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "ckb-merkle-mountain-range",
  "frame-benchmarking",
@@ -5228,7 +5228,7 @@ dependencies = [
 [[package]]
 name = "pallet-mmr-rpc"
 version = "3.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "jsonrpsee",
  "parity-scale-codec",
@@ -5243,7 +5243,7 @@ dependencies = [
 [[package]]
 name = "pallet-multisig"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5258,7 +5258,7 @@ dependencies = [
 [[package]]
 name = "pallet-nomination-pools"
 version = "1.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -5275,7 +5275,7 @@ dependencies = [
 [[package]]
 name = "pallet-nomination-pools-benchmarking"
 version = "1.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-election-provider-support",
@@ -5294,7 +5294,7 @@ dependencies = [
 [[package]]
 name = "pallet-nomination-pools-runtime-api"
 version = "1.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "sp-api",
@@ -5304,7 +5304,7 @@ dependencies = [
 [[package]]
 name = "pallet-offences"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -5321,7 +5321,7 @@ dependencies = [
 [[package]]
 name = "pallet-offences-benchmarking"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-election-provider-support",
@@ -5344,7 +5344,7 @@ dependencies = [
 [[package]]
 name = "pallet-preimage"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5360,7 +5360,7 @@ dependencies = [
 [[package]]
 name = "pallet-proxy"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5375,7 +5375,7 @@ dependencies = [
 [[package]]
 name = "pallet-recovery"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5390,7 +5390,7 @@ dependencies = [
 [[package]]
 name = "pallet-scheduler"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5406,7 +5406,7 @@ dependencies = [
 [[package]]
 name = "pallet-session"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -5427,7 +5427,7 @@ dependencies = [
 [[package]]
 name = "pallet-session-benchmarking"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5443,7 +5443,7 @@ dependencies = [
 [[package]]
 name = "pallet-society"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -5457,7 +5457,7 @@ dependencies = [
 [[package]]
 name = "pallet-staking"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-election-provider-support",
@@ -5480,7 +5480,7 @@ dependencies = [
 [[package]]
 name = "pallet-staking-reward-curve"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro-crate",
  "proc-macro2",
@@ -5491,7 +5491,7 @@ dependencies = [
 [[package]]
 name = "pallet-staking-reward-fn"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "sp-arithmetic",
@@ -5500,7 +5500,7 @@ dependencies = [
 [[package]]
 name = "pallet-sudo"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -5514,7 +5514,7 @@ dependencies = [
 [[package]]
 name = "pallet-timestamp"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5532,7 +5532,7 @@ dependencies = [
 [[package]]
 name = "pallet-tips"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5551,7 +5551,7 @@ dependencies = [
 [[package]]
 name = "pallet-transaction-payment"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-support",
  "frame-system",
@@ -5567,7 +5567,7 @@ dependencies = [
 [[package]]
 name = "pallet-transaction-payment-rpc"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "jsonrpsee",
  "pallet-transaction-payment-rpc-runtime-api",
@@ -5582,7 +5582,7 @@ dependencies = [
 [[package]]
 name = "pallet-transaction-payment-rpc-runtime-api"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "pallet-transaction-payment",
  "parity-scale-codec",
@@ -5593,7 +5593,7 @@ dependencies = [
 [[package]]
 name = "pallet-treasury"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5610,7 +5610,7 @@ dependencies = [
 [[package]]
 name = "pallet-utility"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -5626,7 +5626,7 @@ dependencies = [
 [[package]]
 name = "pallet-vesting"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-benchmarking",
  "frame-support",
@@ -8100,7 +8100,7 @@ dependencies = [
 [[package]]
 name = "remote-externalities"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "env_logger 0.9.0",
  "jsonrpsee",
@@ -8442,7 +8442,7 @@ dependencies = [
 [[package]]
 name = "sc-allocator"
 version = "4.1.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "sp-core",
@@ -8453,7 +8453,7 @@ dependencies = [
 [[package]]
 name = "sc-authority-discovery"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "futures-timer",
@@ -8465,7 +8465,6 @@ dependencies = [
  "prost-build",
  "rand 0.7.3",
  "sc-client-api",
- "sc-network",
  "sc-network-common",
  "sp-api",
  "sp-authority-discovery",
@@ -8480,7 +8479,7 @@ dependencies = [
 [[package]]
 name = "sc-basic-authorship"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "futures-timer",
@@ -8503,7 +8502,7 @@ dependencies = [
 [[package]]
 name = "sc-block-builder"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "sc-client-api",
@@ -8519,13 +8518,13 @@ dependencies = [
 [[package]]
 name = "sc-chain-spec"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "impl-trait-for-tuples",
  "memmap2 0.5.0",
  "parity-scale-codec",
  "sc-chain-spec-derive",
- "sc-network",
+ "sc-network-common",
  "sc-telemetry",
  "serde",
  "serde_json",
@@ -8536,7 +8535,7 @@ dependencies = [
 [[package]]
 name = "sc-chain-spec-derive"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro-crate",
  "proc-macro2",
@@ -8547,7 +8546,7 @@ dependencies = [
 [[package]]
 name = "sc-cli"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "chrono",
  "clap",
@@ -8586,7 +8585,7 @@ dependencies = [
 [[package]]
 name = "sc-client-api"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "fnv",
  "futures",
@@ -8614,7 +8613,7 @@ dependencies = [
 [[package]]
 name = "sc-client-db"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "hash-db",
  "kvdb",
@@ -8639,7 +8638,7 @@ dependencies = [
 [[package]]
 name = "sc-consensus"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "futures",
@@ -8663,7 +8662,7 @@ dependencies = [
 [[package]]
 name = "sc-consensus-babe"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "fork-tree",
@@ -8705,7 +8704,7 @@ dependencies = [
 [[package]]
 name = "sc-consensus-babe-rpc"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "jsonrpsee",
@@ -8727,7 +8726,7 @@ dependencies = [
 [[package]]
 name = "sc-consensus-epochs"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "fork-tree",
  "parity-scale-codec",
@@ -8740,7 +8739,7 @@ dependencies = [
 [[package]]
 name = "sc-consensus-slots"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "futures",
@@ -8765,7 +8764,7 @@ dependencies = [
 [[package]]
 name = "sc-executor"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "lazy_static",
  "lru 0.7.8",
@@ -8792,7 +8791,7 @@ dependencies = [
 [[package]]
 name = "sc-executor-common"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "environmental",
  "parity-scale-codec",
@@ -8808,7 +8807,7 @@ dependencies = [
 [[package]]
 name = "sc-executor-wasmi"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "parity-scale-codec",
@@ -8823,7 +8822,7 @@ dependencies = [
 [[package]]
 name = "sc-executor-wasmtime"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "cfg-if 1.0.0",
  "libc",
@@ -8843,7 +8842,7 @@ dependencies = [
 [[package]]
 name = "sc-finality-grandpa"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "ahash",
  "async-trait",
@@ -8884,7 +8883,7 @@ dependencies = [
 [[package]]
 name = "sc-finality-grandpa-rpc"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "finality-grandpa",
  "futures",
@@ -8905,7 +8904,7 @@ dependencies = [
 [[package]]
 name = "sc-informant"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "ansi_term",
  "futures",
@@ -8922,7 +8921,7 @@ dependencies = [
 [[package]]
 name = "sc-keystore"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "hex",
@@ -8937,7 +8936,7 @@ dependencies = [
 [[package]]
 name = "sc-network"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "asynchronous-codec",
@@ -8986,7 +8985,7 @@ dependencies = [
 [[package]]
 name = "sc-network-common"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "bitflags",
@@ -8997,6 +8996,7 @@ dependencies = [
  "prost-build",
  "sc-consensus",
  "sc-peerset",
+ "serde",
  "smallvec",
  "sp-consensus",
  "sp-finality-grandpa",
@@ -9007,7 +9007,7 @@ dependencies = [
 [[package]]
 name = "sc-network-gossip"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "ahash",
  "futures",
@@ -9015,8 +9015,8 @@ dependencies = [
  "libp2p",
  "log",
  "lru 0.7.8",
- "sc-network",
  "sc-network-common",
+ "sc-peerset",
  "sp-runtime",
  "substrate-prometheus-endpoint",
  "tracing",
@@ -9025,7 +9025,7 @@ dependencies = [
 [[package]]
 name = "sc-network-light"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "hex",
@@ -9046,7 +9046,7 @@ dependencies = [
 [[package]]
 name = "sc-network-sync"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "fork-tree",
  "futures",
@@ -9074,7 +9074,7 @@ dependencies = [
 [[package]]
 name = "sc-offchain"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "bytes",
  "fnv",
@@ -9083,14 +9083,15 @@ dependencies = [
  "hex",
  "hyper",
  "hyper-rustls",
+ "libp2p",
  "num_cpus",
  "once_cell",
  "parity-scale-codec",
  "parking_lot 0.12.0",
  "rand 0.7.3",
  "sc-client-api",
- "sc-network",
  "sc-network-common",
+ "sc-peerset",
  "sc-utils",
  "sp-api",
  "sp-core",
@@ -9103,7 +9104,7 @@ dependencies = [
 [[package]]
 name = "sc-peerset"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "libp2p",
@@ -9116,7 +9117,7 @@ dependencies = [
 [[package]]
 name = "sc-proposer-metrics"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "substrate-prometheus-endpoint",
@@ -9125,7 +9126,7 @@ dependencies = [
 [[package]]
 name = "sc-rpc"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "hash-db",
@@ -9155,7 +9156,7 @@ dependencies = [
 [[package]]
 name = "sc-rpc-api"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "jsonrpsee",
@@ -9178,7 +9179,7 @@ dependencies = [
 [[package]]
 name = "sc-rpc-server"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "jsonrpsee",
@@ -9191,7 +9192,7 @@ dependencies = [
 [[package]]
 name = "sc-service"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "directories",
@@ -9258,7 +9259,7 @@ dependencies = [
 [[package]]
 name = "sc-state-db"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "parity-scale-codec",
@@ -9272,7 +9273,7 @@ dependencies = [
 [[package]]
 name = "sc-sync-state-rpc"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "jsonrpsee",
  "parity-scale-codec",
@@ -9291,7 +9292,7 @@ dependencies = [
 [[package]]
 name = "sc-sysinfo"
 version = "6.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "libc",
@@ -9310,7 +9311,7 @@ dependencies = [
 [[package]]
 name = "sc-telemetry"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "chrono",
  "futures",
@@ -9328,7 +9329,7 @@ dependencies = [
 [[package]]
 name = "sc-tracing"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "ansi_term",
  "atty",
@@ -9359,7 +9360,7 @@ dependencies = [
 [[package]]
 name = "sc-tracing-proc-macro"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro-crate",
  "proc-macro2",
@@ -9370,7 +9371,7 @@ dependencies = [
 [[package]]
 name = "sc-transaction-pool"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "futures-timer",
@@ -9396,7 +9397,7 @@ dependencies = [
 [[package]]
 name = "sc-transaction-pool-api"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "log",
@@ -9409,7 +9410,7 @@ dependencies = [
 [[package]]
 name = "sc-utils"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "futures-timer",
@@ -9894,7 +9895,7 @@ dependencies = [
 [[package]]
 name = "sp-api"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "hash-db",
  "log",
@@ -9912,7 +9913,7 @@ dependencies = [
 [[package]]
 name = "sp-api-proc-macro"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "blake2",
  "proc-macro-crate",
@@ -9924,7 +9925,7 @@ dependencies = [
 [[package]]
 name = "sp-application-crypto"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -9937,7 +9938,7 @@ dependencies = [
 [[package]]
 name = "sp-arithmetic"
 version = "5.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "integer-sqrt",
  "num-traits",
@@ -9952,7 +9953,7 @@ dependencies = [
 [[package]]
 name = "sp-authority-discovery"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -9965,7 +9966,7 @@ dependencies = [
 [[package]]
 name = "sp-authorship"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "parity-scale-codec",
@@ -9977,7 +9978,7 @@ dependencies = [
 [[package]]
 name = "sp-block-builder"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "sp-api",
@@ -9989,7 +9990,7 @@ dependencies = [
 [[package]]
 name = "sp-blockchain"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "log",
@@ -10007,7 +10008,7 @@ dependencies = [
 [[package]]
 name = "sp-consensus"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "futures",
@@ -10026,7 +10027,7 @@ dependencies = [
 [[package]]
 name = "sp-consensus-babe"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "merlin",
@@ -10049,7 +10050,7 @@ dependencies = [
 [[package]]
 name = "sp-consensus-slots"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -10063,7 +10064,7 @@ dependencies = [
 [[package]]
 name = "sp-consensus-vrf"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -10076,7 +10077,7 @@ dependencies = [
 [[package]]
 name = "sp-core"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "base58",
  "bitflags",
@@ -10122,7 +10123,7 @@ dependencies = [
 [[package]]
 name = "sp-core-hashing"
 version = "4.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "blake2",
  "byteorder",
@@ -10136,7 +10137,7 @@ dependencies = [
 [[package]]
 name = "sp-core-hashing-proc-macro"
 version = "5.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -10147,7 +10148,7 @@ dependencies = [
 [[package]]
 name = "sp-database"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "kvdb",
  "parking_lot 0.12.0",
@@ -10156,7 +10157,7 @@ dependencies = [
 [[package]]
 name = "sp-debug-derive"
 version = "4.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -10166,7 +10167,7 @@ dependencies = [
 [[package]]
 name = "sp-externalities"
 version = "0.12.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "environmental",
  "parity-scale-codec",
@@ -10177,7 +10178,7 @@ dependencies = [
 [[package]]
 name = "sp-finality-grandpa"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "finality-grandpa",
  "log",
@@ -10195,7 +10196,7 @@ dependencies = [
 [[package]]
 name = "sp-inherents"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "impl-trait-for-tuples",
@@ -10209,7 +10210,7 @@ dependencies = [
 [[package]]
 name = "sp-io"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "bytes",
  "futures",
@@ -10235,7 +10236,7 @@ dependencies = [
 [[package]]
 name = "sp-keyring"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "lazy_static",
  "sp-core",
@@ -10246,7 +10247,7 @@ dependencies = [
 [[package]]
 name = "sp-keystore"
 version = "0.12.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "futures",
@@ -10263,7 +10264,7 @@ dependencies = [
 [[package]]
 name = "sp-maybe-compressed-blob"
 version = "4.1.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "thiserror",
  "zstd",
@@ -10272,7 +10273,7 @@ dependencies = [
 [[package]]
 name = "sp-mmr-primitives"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "parity-scale-codec",
@@ -10287,7 +10288,7 @@ dependencies = [
 [[package]]
 name = "sp-npos-elections"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -10301,7 +10302,7 @@ dependencies = [
 [[package]]
 name = "sp-offchain"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "sp-api",
  "sp-core",
@@ -10311,7 +10312,7 @@ dependencies = [
 [[package]]
 name = "sp-panic-handler"
 version = "4.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "backtrace",
  "lazy_static",
@@ -10321,7 +10322,7 @@ dependencies = [
 [[package]]
 name = "sp-rpc"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "rustc-hash",
  "serde",
@@ -10331,7 +10332,7 @@ dependencies = [
 [[package]]
 name = "sp-runtime"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "either",
  "hash256-std-hasher",
@@ -10353,7 +10354,7 @@ dependencies = [
 [[package]]
 name = "sp-runtime-interface"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "bytes",
  "impl-trait-for-tuples",
@@ -10371,7 +10372,7 @@ dependencies = [
 [[package]]
 name = "sp-runtime-interface-proc-macro"
 version = "5.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "Inflector",
  "proc-macro-crate",
@@ -10383,7 +10384,7 @@ dependencies = [
 [[package]]
 name = "sp-sandbox"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "parity-scale-codec",
@@ -10397,7 +10398,7 @@ dependencies = [
 [[package]]
 name = "sp-session"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -10411,7 +10412,7 @@ dependencies = [
 [[package]]
 name = "sp-staking"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "scale-info",
@@ -10422,7 +10423,7 @@ dependencies = [
 [[package]]
 name = "sp-state-machine"
 version = "0.12.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "hash-db",
  "log",
@@ -10444,12 +10445,12 @@ dependencies = [
 [[package]]
 name = "sp-std"
 version = "4.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 
 [[package]]
 name = "sp-storage"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "impl-serde",
  "parity-scale-codec",
@@ -10462,7 +10463,7 @@ dependencies = [
 [[package]]
 name = "sp-tasks"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "log",
  "sp-core",
@@ -10475,7 +10476,7 @@ dependencies = [
 [[package]]
 name = "sp-timestamp"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "futures-timer",
@@ -10491,7 +10492,7 @@ dependencies = [
 [[package]]
 name = "sp-tracing"
 version = "5.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "sp-std",
@@ -10503,7 +10504,7 @@ dependencies = [
 [[package]]
 name = "sp-transaction-pool"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "sp-api",
  "sp-runtime",
@@ -10512,7 +10513,7 @@ dependencies = [
 [[package]]
 name = "sp-transaction-storage-proof"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "log",
@@ -10528,7 +10529,7 @@ dependencies = [
 [[package]]
 name = "sp-trie"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "ahash",
  "hash-db",
@@ -10551,7 +10552,7 @@ dependencies = [
 [[package]]
 name = "sp-version"
 version = "5.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "impl-serde",
  "parity-scale-codec",
@@ -10568,7 +10569,7 @@ dependencies = [
 [[package]]
 name = "sp-version-proc-macro"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "parity-scale-codec",
  "proc-macro2",
@@ -10579,7 +10580,7 @@ dependencies = [
 [[package]]
 name = "sp-wasm-interface"
 version = "6.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "impl-trait-for-tuples",
  "log",
@@ -10753,7 +10754,7 @@ dependencies = [
 [[package]]
 name = "substrate-build-script-utils"
 version = "3.0.0"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "platforms",
 ]
@@ -10761,7 +10762,7 @@ dependencies = [
 [[package]]
 name = "substrate-frame-rpc-system"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "frame-system-rpc-runtime-api",
  "futures",
@@ -10782,7 +10783,7 @@ dependencies = [
 [[package]]
 name = "substrate-prometheus-endpoint"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures-util",
  "hyper",
@@ -10795,7 +10796,7 @@ dependencies = [
 [[package]]
 name = "substrate-state-trie-migration-rpc"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "jsonrpsee",
  "log",
@@ -10816,7 +10817,7 @@ dependencies = [
 [[package]]
 name = "substrate-test-client"
 version = "2.0.1"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "async-trait",
  "futures",
@@ -10842,7 +10843,7 @@ dependencies = [
 [[package]]
 name = "substrate-test-utils"
 version = "4.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "futures",
  "substrate-test-utils-derive",
@@ -10852,7 +10853,7 @@ dependencies = [
 [[package]]
 name = "substrate-test-utils-derive"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "proc-macro-crate",
  "proc-macro2",
@@ -10863,7 +10864,7 @@ dependencies = [
 [[package]]
 name = "substrate-wasm-builder"
 version = "5.0.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "ansi_term",
  "build-helper",
@@ -11577,7 +11578,7 @@ checksum = "59547bce71d9c38b83d9c0e92b6066c4253371f15005def0c30d9657f50c7642"
 [[package]]
 name = "try-runtime-cli"
 version = "0.10.0-dev"
-source = "git+https://github.com/paritytech/substrate?branch=master#00cc5f104176fac6f5a624bced22a2192c7c0470"
+source = "git+https://github.com/paritytech/substrate?branch=master#57e3486d9c7bb4deaef33cf9ba2da083b4e40314"
 dependencies = [
  "clap",
  "jsonrpsee",
diff --git a/node/network/bridge/src/network.rs b/node/network/bridge/src/network.rs
index 00a950f35c5..e80094588e3 100644
--- a/node/network/bridge/src/network.rs
+++ b/node/network/bridge/src/network.rs
@@ -22,11 +22,12 @@ use futures::{prelude::*, stream::BoxStream};
 use parity_scale_codec::Encode;
 
 use sc_network::{
-	config::parse_addr, multiaddr::Multiaddr, Event as NetworkEvent, IfDisconnected,
-	NetworkService, OutboundFailure, RequestFailure,
+	multiaddr::Multiaddr, Event as NetworkEvent, IfDisconnected, NetworkService, OutboundFailure,
+	RequestFailure,
 };
-use sc_network_common::service::{
-	NetworkEventStream, NetworkNotification, NetworkPeers, NetworkRequest,
+use sc_network_common::{
+	config::parse_addr,
+	service::{NetworkEventStream, NetworkNotification, NetworkPeers, NetworkRequest},
 };
 
 use polkadot_node_network_protocol::{
diff --git a/node/overseer/src/lib.rs b/node/overseer/src/lib.rs
index 21160bddaec..dd5177c6a38 100644
--- a/node/overseer/src/lib.rs
+++ b/node/overseer/src/lib.rs
@@ -185,12 +185,13 @@ impl Handle {
 
 	/// Inform the `Overseer` that that some block was imported.
 	pub async fn block_imported(&mut self, block: BlockInfo) {
-		self.send_and_log_error(Event::BlockImported(block)).await
+		self.send_and_log_error(PalletEvent::BlockImported(block)).await
 	}
 
 	/// Send some message to one of the `Subsystem`s.
 	pub async fn send_msg(&mut self, msg: impl Into<AllMessages>, origin: &'static str) {
-		self.send_and_log_error(Event::MsgToSubsystem { msg: msg.into(), origin }).await
+		self.send_and_log_error(PalletEvent::MsgToSubsystem { msg: msg.into(), origin })
+			.await
 	}
 
 	/// Send a message not providing an origin.
@@ -201,7 +202,7 @@ impl Handle {
 
 	/// Inform the `Overseer` that some block was finalized.
 	pub async fn block_finalized(&mut self, block: BlockInfo) {
-		self.send_and_log_error(Event::BlockFinalized(block)).await
+		self.send_and_log_error(PalletEvent::BlockFinalized(block)).await
 	}
 
 	/// Wait for a block with the given hash to be in the active-leaves set.
@@ -215,7 +216,7 @@ impl Handle {
 		hash: Hash,
 		response_channel: oneshot::Sender<SubsystemResult<()>>,
 	) {
-		self.send_and_log_error(Event::ExternalRequest(ExternalRequest::WaitForActivation {
+		self.send_and_log_error(PalletEvent::ExternalRequest(ExternalRequest::WaitForActivation {
 			hash,
 			response_channel,
 		}))
@@ -224,11 +225,11 @@ impl Handle {
 
 	/// Tell `Overseer` to shutdown.
 	pub async fn stop(&mut self) {
-		self.send_and_log_error(Event::Stop).await;
+		self.send_and_log_error(PalletEvent::Stop).await;
 	}
 
 	/// Most basic operation, to stop a server.
-	async fn send_and_log_error(&mut self, event: Event) {
+	async fn send_and_log_error(&mut self, event: PalletEvent) {
 		if self.0.send(event).await.is_err() {
 			gum::info!(target: LOG_TARGET, "Failed to send an event to Overseer");
 		}
@@ -265,7 +266,7 @@ impl From<FinalityNotification<Block>> for BlockInfo {
 
 /// An event from outside the overseer scope, such
 /// as the substrate framework or user interaction.
-pub enum Event {
+pub enum PalletEvent {
 	/// A new block was imported.
 	BlockImported(BlockInfo),
 	/// A block was finalized with i.e. babe or another consensus algorithm.
@@ -442,7 +443,7 @@ pub async fn forward_events<P: BlockchainEvents<Block>>(client: Arc<P>, mut hand
 /// ```
 #[orchestra(
 	gen=AllMessages,
-	event=Event,
+	event=PalletEvent,
 	signal=OverseerSignal,
 	error=SubsystemError,
 	message_capacity=2048,
@@ -724,21 +725,21 @@ where
 			select! {
 				msg = self.events_rx.select_next_some() => {
 					match msg {
-						Event::MsgToSubsystem { msg, origin } => {
+						PalletEvent::MsgToSubsystem { msg, origin } => {
 							self.route_message(msg.into(), origin).await?;
 							self.metrics.on_message_relayed();
 						}
-						Event::Stop => {
+						PalletEvent::Stop => {
 							self.stop().await;
 							return Ok(());
 						}
-						Event::BlockImported(block) => {
+						PalletEvent::BlockImported(block) => {
 							self.block_imported(block).await?;
 						}
-						Event::BlockFinalized(block) => {
+						PalletEvent::BlockFinalized(block) => {
 							self.block_finalized(block).await?;
 						}
-						Event::ExternalRequest(request) => {
+						PalletEvent::ExternalRequest(request) => {
 							self.handle_external_request(request);
 						}
 					}
diff --git a/runtime/common/src/assigned_slots.rs b/runtime/common/src/assigned_slots.rs
index bac642cde58..b5d8d7e9449 100644
--- a/runtime/common/src/assigned_slots.rs
+++ b/runtime/common/src/assigned_slots.rs
@@ -84,8 +84,9 @@ pub mod pallet {
 	#[pallet::config]
 	#[pallet::disable_frame_system_supertrait_check]
 	pub trait Config: configuration::Config + paras::Config + slots::Config {
-		/// The overarching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		/// The overarching PalletEvent type.
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// Origin for assigning slots.
 		type AssignSlotOrigin: EnsureOrigin<<Self as frame_system::Config>::Origin>;
@@ -152,7 +153,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// A para was assigned a permanent parachain slot
 		PermanentSlotAssigned(ParaId),
 		/// A para was assigned a temporary parachain slot
@@ -250,7 +251,7 @@ pub mod pallet {
 			);
 			<PermanentSlotCount<T>>::mutate(|count| count.saturating_inc());
 
-			Self::deposit_event(Event::<T>::PermanentSlotAssigned(id));
+			Self::deposit_event(PalletEvent::<T>::PermanentSlotAssigned(id));
 			Ok(())
 		}
 
@@ -334,7 +335,7 @@ pub mod pallet {
 			TemporarySlots::<T>::insert(id, temp_slot);
 			<TemporarySlotCount<T>>::mutate(|count| count.saturating_inc());
 
-			Self::deposit_event(Event::<T>::TemporarySlotAssigned(id));
+			Self::deposit_event(PalletEvent::<T>::TemporarySlotAssigned(id));
 
 			Ok(())
 		}
@@ -601,7 +602,7 @@ mod tests {
 		type AccountId = u64;
 		type Lookup = IdentityLookup<Self::AccountId>;
 		type Header = Header;
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type BlockHashCount = BlockHashCount;
 		type DbWeight = ();
 		type Version = ();
@@ -621,7 +622,7 @@ mod tests {
 
 	impl pallet_balances::Config for Test {
 		type Balance = u64;
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type DustRemoval = ();
 		type ExistentialDeposit = ExistentialDeposit;
 		type AccountStore = System;
@@ -640,7 +641,7 @@ mod tests {
 	}
 
 	impl parachains_paras::Config for Test {
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type WeightInfo = parachains_paras::TestWeightInfo;
 		type UnsignedPriority = ParasUnsignedPriority;
 		type NextSessionRotation = crate::mock::TestNextSessionRotation;
@@ -655,7 +656,7 @@ mod tests {
 	}
 
 	impl slots::Config for Test {
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type Currency = Balances;
 		type Registrar = TestRegistrar<Test>;
 		type LeasePeriod = LeasePeriod;
@@ -673,7 +674,7 @@ mod tests {
 	}
 
 	impl assigned_slots::Config for Test {
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type AssignSlotOrigin = EnsureRoot<Self::AccountId>;
 		type Leaser = Slots;
 		type PermanentSlotLeasePeriodLength = PermanentSlotLeasePeriodLength;
diff --git a/runtime/common/src/auctions.rs b/runtime/common/src/auctions.rs
index b937a26d567..7971eafc04d 100644
--- a/runtime/common/src/auctions.rs
+++ b/runtime/common/src/auctions.rs
@@ -91,7 +91,8 @@ pub mod pallet {
 	#[pallet::config]
 	pub trait Config: frame_system::Config {
 		/// The overarching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// The type representing the leasing system.
 		type Leaser: Leaser<
@@ -125,7 +126,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// An auction started. Provides its index and the block number where it will begin to
 		/// close and the first lease period of the quadruplet that is auctioned.
 		AuctionStarted {
@@ -402,7 +403,7 @@ impl<T: Config> Pallet<T> {
 		let ending = frame_system::Pallet::<T>::block_number().saturating_add(duration);
 		AuctionInfo::<T>::put((lease_period_index, ending));
 
-		Self::deposit_event(Event::<T>::AuctionStarted {
+		Self::deposit_event(PalletEvent::<T>::AuctionStarted {
 			auction_index: n,
 			lease_period: lease_period_index,
 			ending,
@@ -481,7 +482,7 @@ impl<T: Config> Pallet<T> {
 				// ...and record the amount reserved.
 				ReservedAmounts::<T>::insert(&bidder_para, reserve_required);
 
-				Self::deposit_event(Event::<T>::Reserved {
+				Self::deposit_event(PalletEvent::<T>::Reserved {
 					bidder: bidder.clone(),
 					extra_reserved: additional,
 					total_amount: reserve_required,
@@ -504,14 +505,14 @@ impl<T: Config> Pallet<T> {
 						// It really should be reserved; there's not much we can do here on fail.
 						let err_amt = CurrencyOf::<T>::unreserve(&who, amount);
 						debug_assert!(err_amt.is_zero());
-						Self::deposit_event(Event::<T>::Unreserved { bidder: who, amount });
+						Self::deposit_event(PalletEvent::<T>::Unreserved { bidder: who, amount });
 					}
 				}
 			}
 
 			// Update the range winner.
 			Winning::<T>::insert(offset, &current_winning);
-			Self::deposit_event(Event::<T>::BidAccepted {
+			Self::deposit_event(PalletEvent::<T>::BidAccepted {
 				bidder,
 				para_id: para,
 				amount,
@@ -548,7 +549,7 @@ impl<T: Config> Pallet<T> {
 						T::SampleLength::get().max(One::one());
 
 					let auction_counter = AuctionCounter::<T>::get();
-					Self::deposit_event(Event::<T>::WinningOffset {
+					Self::deposit_event(PalletEvent::<T>::WinningOffset {
 						auction_index: auction_counter,
 						block_number: offset,
 					});
@@ -602,7 +603,7 @@ impl<T: Config> Pallet<T> {
 					// The leaser attempted to get a second lease on the same para ID, possibly griefing us. Let's
 					// keep the amount reserved and let governance sort it out.
 					if CurrencyOf::<T>::reserve(&leaser, amount).is_ok() {
-						Self::deposit_event(Event::<T>::ReserveConfiscated {
+						Self::deposit_event(PalletEvent::<T>::ReserveConfiscated {
 							para_id: para,
 							leaser,
 							amount,
@@ -613,7 +614,7 @@ impl<T: Config> Pallet<T> {
 			}
 		}
 
-		Self::deposit_event(Event::<T>::AuctionClosed {
+		Self::deposit_event(PalletEvent::<T>::AuctionClosed {
 			auction_index: AuctionCounter::<T>::get(),
 		});
 	}
@@ -718,7 +719,7 @@ mod tests {
 		type AccountId = u64;
 		type Lookup = IdentityLookup<Self::AccountId>;
 		type Header = Header;
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type BlockHashCount = BlockHashCount;
 		type Version = ();
 		type PalletInfo = PalletInfo;
@@ -739,7 +740,7 @@ mod tests {
 	impl pallet_balances::Config for Test {
 		type Balance = u64;
 		type DustRemoval = ();
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type ExistentialDeposit = ExistentialDeposit;
 		type AccountStore = System;
 		type WeightInfo = ();
@@ -867,7 +868,7 @@ mod tests {
 	}
 
 	impl Config for Test {
-		type Event = Event;
+		type PalletEvent = PalletEvent;
 		type Leaser = TestLeaser;
 		type Registrar = TestRegistrar<Self>;
 		type EndingPeriod = EndingPeriod;
@@ -1729,9 +1730,9 @@ mod benchmarking {
 
 	use frame_benchmarking::{account, benchmarks, whitelisted_caller};
 
-	fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
+	fn assert_last_event<T: Config>(generic_event: <T as Config>::PalletEvent) {
 		let events = frame_system::Pallet::<T>::events();
-		let system_event: <T as frame_system::Config>::Event = generic_event.into();
+		let system_event: <T as frame_system::Config>::RuntimeEvent = generic_event.into();
 		// compare to the last event record
 		let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 		assert_eq!(event, &system_event);
@@ -1786,7 +1787,7 @@ mod benchmarking {
 			let origin = T::InitiateOrigin::successful_origin();
 		}: _<T::Origin>(origin, duration, lease_period_index)
 		verify {
-			assert_last_event::<T>(Event::<T>::AuctionStarted {
+			assert_last_event::<T>(PalletEvent::<T>::AuctionStarted {
 				auction_index: AuctionCounter::<T>::get(),
 				lease_period: LeasePeriodOf::<T>::max_value(),
 				ending: T::BlockNumber::max_value(),
@@ -1884,7 +1885,7 @@ mod benchmarking {
 			Auctions::<T>::on_initialize(duration + now + T::EndingPeriod::get());
 		} verify {
 			let auction_index = AuctionCounter::<T>::get();
-			assert_last_event::<T>(Event::<T>::AuctionClosed { auction_index }.into());
+			assert_last_event::<T>(PalletEvent::<T>::AuctionClosed { auction_index }.into());
 			assert!(Winning::<T>::iter().count().is_zero());
 		}
 
diff --git a/runtime/common/src/claims.rs b/runtime/common/src/claims.rs
index e2731f9336c..31578630808 100644
--- a/runtime/common/src/claims.rs
+++ b/runtime/common/src/claims.rs
@@ -172,7 +172,8 @@ pub mod pallet {
 	#[pallet::config]
 	pub trait Config: frame_system::Config {
 		/// The overarching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 		type VestingSchedule: VestingSchedule<Self::AccountId, Moment = Self::BlockNumber>;
 		#[pallet::constant]
 		type Prefix: Get<&'static [u8]>;
@@ -182,7 +183,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// Someone claimed some DOTs.
 		Claimed { who: T::AccountId, ethereum_address: EthereumAddress, amount: BalanceOf<T> },
 	}
@@ -581,7 +582,7 @@ impl<T: Config> Pallet<T> {
 		Signing::<T>::remove(&signer);
 
 		// Let's deposit an event to let the outside world know this happened.
-		Self::deposit_event(Event::<T>::Claimed {
+		Self::deposit_event(PalletEvent::<T>::Claimed {
 			who: dest,
 			ethereum_address: signer,
 			amount: balance_due,
@@ -760,7 +761,7 @@ mod tests {
 		type AccountId = u64;
 		type Lookup = IdentityLookup<u64>;
 		type Header = Header;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type BlockHashCount = BlockHashCount;
 		type Version = ();
 		type PalletInfo = PalletInfo;
@@ -779,7 +780,7 @@ mod tests {
 
 	impl pallet_balances::Config for Test {
 		type Balance = u64;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type DustRemoval = ();
 		type ExistentialDeposit = ExistentialDeposit;
 		type AccountStore = System;
@@ -794,7 +795,7 @@ mod tests {
 	}
 
 	impl pallet_vesting::Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type Currency = Balances;
 		type BlockNumberToBalance = Identity;
 		type MinVestedTransfer = MinVestedTransfer;
@@ -810,7 +811,7 @@ mod tests {
 	}
 
 	impl Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type VestingSchedule = Vesting;
 		type Prefix = Prefix;
 		type MoveClaimOrigin = frame_system::EnsureSignedBy<Six, u64>;
diff --git a/runtime/common/src/crowdloan/mod.rs b/runtime/common/src/crowdloan/mod.rs
index 4b2c29f5398..5366eb93cd1 100644
--- a/runtime/common/src/crowdloan/mod.rs
+++ b/runtime/common/src/crowdloan/mod.rs
@@ -189,7 +189,8 @@ pub mod pallet {
 
 	#[pallet::config]
 	pub trait Config: frame_system::Config {
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b"py/cfund")`
 		#[pallet::constant]
@@ -253,7 +254,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// Create a new crowdloaning campaign.
 		Created { para_id: ParaId },
 		/// Contributed to a crowd sale.
@@ -351,7 +352,7 @@ pub mod pallet {
 						fund.raised,
 					);
 
-					Self::deposit_event(Event::<T>::HandleBidResult { para_id, result });
+					Self::deposit_event(PalletEvent::<T>::HandleBidResult { para_id, result });
 				}
 				T::WeightInfo::on_initialize(new_raise_len)
 			} else {
@@ -437,7 +438,7 @@ pub mod pallet {
 			// Add a lock to the para so that the configuration cannot be changed.
 			T::Registrar::apply_lock(index);
 
-			Self::deposit_event(Event::<T>::Created { para_id: index });
+			Self::deposit_event(PalletEvent::<T>::Created { para_id: index });
 			Ok(())
 		}
 
@@ -494,7 +495,11 @@ pub mod pallet {
 
 			Funds::<T>::insert(index, &fund);
 
-			Self::deposit_event(Event::<T>::Withdrew { who, fund_index: index, amount: balance });
+			Self::deposit_event(PalletEvent::<T>::Withdrew {
+				who,
+				fund_index: index,
+				amount: balance,
+			});
 			Ok(())
 		}
 
@@ -536,11 +541,11 @@ pub mod pallet {
 			Funds::<T>::insert(index, &fund);
 
 			if all_refunded {
-				Self::deposit_event(Event::<T>::AllRefunded { para_id: index });
+				Self::deposit_event(PalletEvent::<T>::AllRefunded { para_id: index });
 				// Refund for unused refund count.
 				Ok(Some(T::WeightInfo::refund(refund_count)).into())
 			} else {
-				Self::deposit_event(Event::<T>::PartiallyRefunded { para_id: index });
+				Self::deposit_event(PalletEvent::<T>::PartiallyRefunded { para_id: index });
 				// No weight to refund since we did not finish the loop.
 				Ok(().into())
 			}
@@ -567,7 +572,7 @@ pub mod pallet {
 
 			CurrencyOf::<T>::unreserve(&fund.depositor, fund.deposit);
 			Funds::<T>::remove(index);
-			Self::deposit_event(Event::<T>::Dissolved { para_id: index });
+			Self::deposit_event(PalletEvent::<T>::Dissolved { para_id: index });
 			Ok(())
 		}
 
@@ -604,7 +609,7 @@ pub mod pallet {
 				},
 			);
 
-			Self::deposit_event(Event::<T>::Edited { para_id: index });
+			Self::deposit_event(PalletEvent::<T>::Edited { para_id: index });
 			Ok(())
 		}
 
@@ -622,7 +627,7 @@ pub mod pallet {
 			ensure!(balance > Zero::zero(), Error::<T>::NoContributions);
 
 			Self::contribution_put(fund.fund_index, &who, &balance, &memo);
-			Self::deposit_event(Event::<T>::MemoUpdated { who, para_id: index, memo });
+			Self::deposit_event(PalletEvent::<T>::MemoUpdated { who, para_id: index, memo });
 			Ok(())
 		}
 
@@ -636,7 +641,7 @@ pub mod pallet {
 			ensure!(!fund.raised.is_zero(), Error::<T>::NoContributions);
 			ensure!(!NewRaise::<T>::get().contains(&index), Error::<T>::AlreadyInNewRaise);
 			NewRaise::<T>::append(index);
-			Self::deposit_event(Event::<T>::AddedToNewRaise { para_id: index });
+			Self::deposit_event(PalletEvent::<T>::AddedToNewRaise { para_id: index });
 			Ok(())
 		}
 
@@ -811,7 +816,11 @@ impl<T: Config> Pallet<T> {
 
 		Funds::<T>::insert(index, &fund);
 
-		Self::deposit_event(Event::<T>::Contributed { who, fund_index: index, amount: value });
+		Self::deposit_event(PalletEvent::<T>::Contributed {
+			who,
+			fund_index: index,
+			amount: value,
+		});
 		Ok(())
 	}
 }
@@ -901,7 +910,7 @@ mod tests {
 		type AccountId = u64;
 		type Lookup = IdentityLookup<Self::AccountId>;
 		type Header = Header;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type BlockHashCount = BlockHashCount;
 		type Version = ();
 		type PalletInfo = PalletInfo;
@@ -920,7 +929,7 @@ mod tests {
 
 	impl pallet_balances::Config for Test {
 		type Balance = u64;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type DustRemoval = ();
 		type ExistentialDeposit = ExistentialDeposit;
 		type AccountStore = System;
@@ -1072,7 +1081,7 @@ mod tests {
 	}
 
 	impl Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type SubmissionDeposit = SubmissionDeposit;
 		type MinContribution = MinContribution;
 		type PalletId = CrowdloanPalletId;
@@ -1129,8 +1138,8 @@ mod tests {
 		}
 	}
 
-	fn last_event() -> Event {
-		System::events().pop().expect("Event expected").event
+	fn last_event() -> PalletEvent {
+		System::events().pop().expect("PalletEvent expected").event
 	}
 
 	#[test]
@@ -1651,7 +1660,7 @@ mod tests {
 			assert_ok!(Crowdloan::refund(Origin::signed(1337), para));
 			assert_eq!(
 				last_event(),
-				super::Event::<Test>::PartiallyRefunded { para_id: para }.into()
+				super::PalletEvent::<Test>::PartiallyRefunded { para_id: para }.into()
 			);
 
 			// Funds still left over
@@ -1659,7 +1668,10 @@ mod tests {
 
 			// Call again
 			assert_ok!(Crowdloan::refund(Origin::signed(1337), para));
-			assert_eq!(last_event(), super::Event::<Test>::AllRefunded { para_id: para }.into());
+			assert_eq!(
+				last_event(),
+				super::PalletEvent::<Test>::AllRefunded { para_id: para }.into()
+			);
 
 			// Funds are returned
 			assert_eq!(Balances::free_balance(account_id), 0);
@@ -1906,9 +1918,9 @@ mod benchmarking {
 
 	use frame_benchmarking::{account, benchmarks, whitelisted_caller};
 
-	fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
+	fn assert_last_event<T: Config>(generic_event: <T as Config>::PalletEvent) {
 		let events = frame_system::Pallet::<T>::events();
-		let system_event: <T as frame_system::Config>::Event = generic_event.into();
+		let system_event: <T as frame_system::Config>::RuntimeEvent = generic_event.into();
 		// compare to the last event record
 		let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 		assert_eq!(event, &system_event);
@@ -1987,7 +1999,7 @@ mod benchmarking {
 
 		}: _(RawOrigin::Signed(caller), para_id, cap, first_period, last_period, end, Some(verifier))
 		verify {
-			assert_last_event::<T>(Event::<T>::Created { para_id }.into())
+			assert_last_event::<T>(PalletEvent::<T>::Created { para_id }.into())
 		}
 
 		// Contribute has two arms: PreEnding and Ending, but both are equal complexity.
@@ -2008,7 +2020,7 @@ mod benchmarking {
 		verify {
 			// NewRaise is appended to, so we don't need to fill it up for worst case scenario.
 			assert!(!NewRaise::<T>::get().is_empty());
-			assert_last_event::<T>(Event::<T>::Contributed { who: caller, fund_index, amount: contribution }.into());
+			assert_last_event::<T>(PalletEvent::<T>::Contributed { who: caller, fund_index, amount: contribution }.into());
 		}
 
 		withdraw {
@@ -2021,7 +2033,7 @@ mod benchmarking {
 			frame_system::Pallet::<T>::set_block_number(T::BlockNumber::max_value());
 		}: _(RawOrigin::Signed(caller), contributor.clone(), fund_index)
 		verify {
-			assert_last_event::<T>(Event::<T>::Withdrew { who: contributor, fund_index, amount: T::MinContribution::get() }.into());
+			assert_last_event::<T>(PalletEvent::<T>::Withdrew { who: contributor, fund_index, amount: T::MinContribution::get() }.into());
 		}
 
 		// Worst case: Refund removes `RemoveKeysLimit` keys, and is fully refunded.
@@ -2041,7 +2053,7 @@ mod benchmarking {
 			frame_system::Pallet::<T>::set_block_number(T::BlockNumber::max_value());
 		}: _(RawOrigin::Signed(caller), fund_index)
 		verify {
-			assert_last_event::<T>(Event::<T>::AllRefunded { para_id: fund_index }.into());
+			assert_last_event::<T>(PalletEvent::<T>::AllRefunded { para_id: fund_index }.into());
 		}
 
 		dissolve {
@@ -2052,7 +2064,7 @@ mod benchmarking {
 			frame_system::Pallet::<T>::set_block_number(T::BlockNumber::max_value());
 		}: _(RawOrigin::Signed(caller.clone()), fund_index)
 		verify {
-			assert_last_event::<T>(Event::<T>::Dissolved { para_id: fund_index }.into());
+			assert_last_event::<T>(PalletEvent::<T>::Dissolved { para_id: fund_index }.into());
 		}
 
 		edit {
@@ -2081,7 +2093,7 @@ mod benchmarking {
 			// Doesn't matter what we edit to, so use the same values.
 		}: _(RawOrigin::Root, para_id, cap, first_period, last_period, end, Some(verifier))
 		verify {
-			assert_last_event::<T>(Event::<T>::Edited { para_id }.into())
+			assert_last_event::<T>(PalletEvent::<T>::Edited { para_id }.into())
 		}
 
 		add_memo {
@@ -2111,7 +2123,7 @@ mod benchmarking {
 		}: _(RawOrigin::Signed(caller), fund_index)
 		verify {
 			assert!(!NewRaise::<T>::get().is_empty());
-			assert_last_event::<T>(Event::<T>::AddedToNewRaise { para_id: fund_index }.into())
+			assert_last_event::<T>(PalletEvent::<T>::AddedToNewRaise { para_id: fund_index }.into())
 		}
 
 		// Worst case scenario: N funds are all in the `NewRaise` list, we are
@@ -2150,7 +2162,7 @@ mod benchmarking {
 			Crowdloan::<T>::on_initialize(end_block);
 		} verify {
 			assert_eq!(EndingsCount::<T>::get(), old_endings_count + 1);
-			assert_last_event::<T>(Event::<T>::HandleBidResult { para_id: (n - 1).into(), result: Ok(()) }.into());
+			assert_last_event::<T>(PalletEvent::<T>::HandleBidResult { para_id: (n - 1).into(), result: Ok(()) }.into());
 		}
 
 		impl_benchmark_test_suite!(
diff --git a/runtime/common/src/impls.rs b/runtime/common/src/impls.rs
index bce847c82a8..c528f191511 100644
--- a/runtime/common/src/impls.rs
+++ b/runtime/common/src/impls.rs
@@ -113,7 +113,7 @@ mod tests {
 		type AccountId = AccountId;
 		type Lookup = IdentityLookup<Self::AccountId>;
 		type Header = Header;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type BlockHashCount = BlockHashCount;
 		type BlockLength = BlockLength;
 		type BlockWeights = BlockWeights;
@@ -131,7 +131,7 @@ mod tests {
 
 	impl pallet_balances::Config for Test {
 		type Balance = u64;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type DustRemoval = ();
 		type ExistentialDeposit = ();
 		type AccountStore = System;
@@ -150,7 +150,7 @@ mod tests {
 		type Currency = pallet_balances::Pallet<Test>;
 		type ApproveOrigin = frame_system::EnsureRoot<AccountId>;
 		type RejectOrigin = frame_system::EnsureRoot<AccountId>;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type OnSlash = ();
 		type ProposalBond = ();
 		type ProposalBondMinimum = ();
diff --git a/runtime/common/src/integration_tests.rs b/runtime/common/src/integration_tests.rs
index 76dc1f4c55b..89fbe240964 100644
--- a/runtime/common/src/integration_tests.rs
+++ b/runtime/common/src/integration_tests.rs
@@ -120,7 +120,7 @@ impl frame_system::Config for Test {
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type Version = ();
 	type PalletInfo = PalletInfo;
@@ -178,7 +178,7 @@ parameter_types! {
 impl pallet_balances::Config for Test {
 	type MaxLocks = ();
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -200,7 +200,7 @@ parameter_types! {
 }
 
 impl paras::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = paras::TestWeightInfo;
 	type UnsignedPriority = ParasUnsignedPriority;
 	type NextSessionRotation = crate::mock::TestNextSessionRotation;
@@ -212,7 +212,7 @@ parameter_types! {
 }
 
 impl paras_registrar::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnSwap = (Crowdloan, Slots);
 	type ParaDeposit = ParaDeposit;
 	type DataDepositPerByte = DataDepositPerByte;
@@ -227,7 +227,7 @@ parameter_types! {
 }
 
 impl auctions::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Leaser = Slots;
 	type Registrar = Registrar;
 	type EndingPeriod = EndingPeriod;
@@ -243,7 +243,7 @@ parameter_types! {
 }
 
 impl slots::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type Registrar = Registrar;
 	type LeasePeriod = LeasePeriod;
@@ -261,7 +261,7 @@ parameter_types! {
 }
 
 impl crowdloan::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type PalletId = CrowdloanId;
 	type SubmissionDeposit = SubmissionDeposit;
 	type MinContribution = MinContribution;
@@ -342,11 +342,11 @@ fn run_to_session(n: u32) {
 	run_to_block(block_number);
 }
 
-fn last_event() -> Event {
-	System::events().pop().expect("Event expected").event
+fn last_event() -> PalletEvent {
+	System::events().pop().expect("PalletEvent expected").event
 }
 
-fn contains_event(event: Event) -> bool {
+fn contains_event(event: PalletEvent) -> bool {
 	System::events().iter().any(|x| x.event == event)
 }
 
@@ -432,7 +432,7 @@ fn basic_end_to_end_works() {
 			// Auction ends at block 110 + offset
 			run_to_block(109 + offset);
 			assert!(contains_event(
-				crowdloan::Event::<Test>::HandleBidResult {
+				crowdloan::PalletEvent::<Test>::HandleBidResult {
 					para_id: ParaId::from(para_2),
 					result: Ok(())
 				}
@@ -441,7 +441,7 @@ fn basic_end_to_end_works() {
 			run_to_block(110 + offset);
 			assert_eq!(
 				last_event(),
-				auctions::Event::<Test>::AuctionClosed { auction_index: 1 }.into()
+				auctions::PalletEvent::<Test>::AuctionClosed { auction_index: 1 }.into()
 			);
 
 			// Paras should have won slots
diff --git a/runtime/common/src/paras_registrar.rs b/runtime/common/src/paras_registrar.rs
index 7631914b999..183c307da31 100644
--- a/runtime/common/src/paras_registrar.rs
+++ b/runtime/common/src/paras_registrar.rs
@@ -96,7 +96,8 @@ pub mod pallet {
 	#[pallet::disable_frame_system_supertrait_check]
 	pub trait Config: configuration::Config + paras::Config {
 		/// The overarching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// The aggregated origin type must support the `parachains` origin. We require that we can
 		/// infallibly convert between this origin and the system origin, but in reality, they're the
@@ -126,7 +127,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		Registered { para_id: ParaId, manager: T::AccountId },
 		Deregistered { para_id: ParaId },
 		Reserved { para_id: ParaId, who: T::AccountId },
@@ -492,7 +493,7 @@ impl<T: Config> Pallet<T> {
 		let info = ParaInfo { manager: who.clone(), deposit, locked: false };
 
 		Paras::<T>::insert(id, info);
-		Self::deposit_event(Event::<T>::Reserved { para_id: id, who });
+		Self::deposit_event(PalletEvent::<T>::Reserved { para_id: id, who });
 		Ok(())
 	}
 
@@ -530,7 +531,7 @@ impl<T: Config> Pallet<T> {
 		// We check above that para has no lifecycle, so this should not fail.
 		let res = runtime_parachains::schedule_para_initialize::<T>(id, genesis);
 		debug_assert!(res.is_ok());
-		Self::deposit_event(Event::<T>::Registered { para_id: id, manager: who });
+		Self::deposit_event(PalletEvent::<T>::Registered { para_id: id, manager: who });
 		Ok(())
 	}
 
@@ -549,7 +550,7 @@ impl<T: Config> Pallet<T> {
 		}
 
 		PendingSwap::<T>::remove(id);
-		Self::deposit_event(Event::<T>::Deregistered { para_id: id });
+		Self::deposit_event(PalletEvent::<T>::Deregistered { para_id: id });
 		Ok(())
 	}
 
@@ -657,7 +658,7 @@ mod tests {
 		type AccountId = u64;
 		type Lookup = IdentityLookup<u64>;
 		type Header = Header;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type BlockHashCount = BlockHashCount;
 		type DbWeight = ();
 		type BlockWeights = BlockWeights;
@@ -680,7 +681,7 @@ mod tests {
 	impl pallet_balances::Config for Test {
 		type Balance = u128;
 		type DustRemoval = ();
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type ExistentialDeposit = ExistentialDeposit;
 		type AccountStore = System;
 		type MaxLocks = ();
@@ -698,7 +699,7 @@ mod tests {
 	}
 
 	impl paras::Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type WeightInfo = paras::TestWeightInfo;
 		type UnsignedPriority = ParasUnsignedPriority;
 		type NextSessionRotation = crate::mock::TestNextSessionRotation;
@@ -715,7 +716,7 @@ mod tests {
 	}
 
 	impl Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type Origin = Origin;
 		type Currency = Balances;
 		type OnSwap = MockSwap;
@@ -1226,9 +1227,9 @@ mod benchmarking {
 
 	use frame_benchmarking::{account, benchmarks, whitelisted_caller};
 
-	fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
+	fn assert_last_event<T: Config>(generic_event: <T as Config>::PalletEvent) {
 		let events = frame_system::Pallet::<T>::events();
-		let system_event: <T as frame_system::Config>::Event = generic_event.into();
+		let system_event: <T as frame_system::Config>::RuntimeEvent = generic_event.into();
 		// compare to the last event record
 		let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 		assert_eq!(event, &system_event);
@@ -1268,7 +1269,7 @@ mod benchmarking {
 			T::Currency::make_free_balance_be(&caller, BalanceOf::<T>::max_value());
 		}: _(RawOrigin::Signed(caller.clone()))
 		verify {
-			assert_last_event::<T>(Event::<T>::Reserved { para_id: LOWEST_PUBLIC_ID, who: caller }.into());
+			assert_last_event::<T>(PalletEvent::<T>::Reserved { para_id: LOWEST_PUBLIC_ID, who: caller }.into());
 			assert!(Paras::<T>::get(LOWEST_PUBLIC_ID).is_some());
 			assert_eq!(paras::Pallet::<T>::lifecycle(LOWEST_PUBLIC_ID), None);
 		}
@@ -1282,7 +1283,7 @@ mod benchmarking {
 			assert_ok!(Registrar::<T>::reserve(RawOrigin::Signed(caller.clone()).into()));
 		}: _(RawOrigin::Signed(caller.clone()), para, genesis_head, validation_code)
 		verify {
-			assert_last_event::<T>(Event::<T>::Registered{ para_id: para, manager: caller }.into());
+			assert_last_event::<T>(PalletEvent::<T>::Registered{ para_id: para, manager: caller }.into());
 			assert_eq!(paras::Pallet::<T>::lifecycle(para), Some(ParaLifecycle::Onboarding));
 			next_scheduled_session::<T>();
 			assert_eq!(paras::Pallet::<T>::lifecycle(para), Some(ParaLifecycle::Parathread));
@@ -1296,7 +1297,7 @@ mod benchmarking {
 			let validation_code = Registrar::<T>::worst_validation_code();
 		}: _(RawOrigin::Root, manager.clone(), deposit, para, genesis_head, validation_code)
 		verify {
-			assert_last_event::<T>(Event::<T>::Registered { para_id: para, manager }.into());
+			assert_last_event::<T>(PalletEvent::<T>::Registered { para_id: para, manager }.into());
 			assert_eq!(paras::Pallet::<T>::lifecycle(para), Some(ParaLifecycle::Onboarding));
 			next_scheduled_session::<T>();
 			assert_eq!(paras::Pallet::<T>::lifecycle(para), Some(ParaLifecycle::Parathread));
@@ -1308,7 +1309,7 @@ mod benchmarking {
 			let caller: T::AccountId = whitelisted_caller();
 		}: _(RawOrigin::Signed(caller), para)
 		verify {
-			assert_last_event::<T>(Event::<T>::Deregistered { para_id: para }.into());
+			assert_last_event::<T>(PalletEvent::<T>::Deregistered { para_id: para }.into());
 		}
 
 		swap {
diff --git a/runtime/common/src/purchase.rs b/runtime/common/src/purchase.rs
index 3900f6edb31..c8cee404633 100644
--- a/runtime/common/src/purchase.rs
+++ b/runtime/common/src/purchase.rs
@@ -98,7 +98,8 @@ pub mod pallet {
 	#[pallet::config]
 	pub trait Config: frame_system::Config {
 		/// The overarching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// Balances Pallet
 		type Currency: Currency<Self::AccountId>;
@@ -131,7 +132,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// A [new] account was created.
 		AccountCreated { who: T::AccountId },
 		/// Someone's account validity was updated.
@@ -222,7 +223,7 @@ pub mod pallet {
 				vat: Permill::zero(),
 			};
 			Accounts::<T>::insert(&who, status);
-			Self::deposit_event(Event::<T>::AccountCreated { who });
+			Self::deposit_event(PalletEvent::<T>::AccountCreated { who });
 			Ok(())
 		}
 
@@ -251,7 +252,7 @@ pub mod pallet {
 					Ok(())
 				},
 			)?;
-			Self::deposit_event(Event::<T>::ValidityUpdated { who, validity });
+			Self::deposit_event(PalletEvent::<T>::ValidityUpdated { who, validity });
 			Ok(())
 		}
 
@@ -283,7 +284,7 @@ pub mod pallet {
 					Ok(())
 				},
 			)?;
-			Self::deposit_event(Event::<T>::BalanceUpdated {
+			Self::deposit_event(PalletEvent::<T>::BalanceUpdated {
 				who,
 				free: free_balance,
 				locked: locked_balance,
@@ -350,7 +351,7 @@ pub mod pallet {
 
 					// Setting the user account to `Completed` ends the purchase process for this user.
 					status.validity = AccountValidity::Completed;
-					Self::deposit_event(Event::<T>::PaymentComplete {
+					Self::deposit_event(PalletEvent::<T>::PaymentComplete {
 						who: who.clone(),
 						free: status.free_balance,
 						locked: status.locked_balance,
@@ -371,7 +372,7 @@ pub mod pallet {
 			T::ConfigurationOrigin::ensure_origin(origin)?;
 			// Possibly this is worse than having the caller account be the payment account?
 			PaymentAccount::<T>::put(who.clone());
-			Self::deposit_event(Event::<T>::PaymentAccountSet { who });
+			Self::deposit_event(PalletEvent::<T>::PaymentAccountSet { who });
 			Ok(())
 		}
 
@@ -387,7 +388,7 @@ pub mod pallet {
 			);
 			// Possibly this is worse than having the caller account be the payment account?
 			Statement::<T>::set(statement);
-			Self::deposit_event(Event::<T>::StatementUpdated);
+			Self::deposit_event(PalletEvent::<T>::StatementUpdated);
 			Ok(())
 		}
 
@@ -406,7 +407,9 @@ pub mod pallet {
 			);
 			// Possibly this is worse than having the caller account be the payment account?
 			UnlockBlock::<T>::set(unlock_block);
-			Self::deposit_event(Event::<T>::UnlockBlockUpdated { block_number: unlock_block });
+			Self::deposit_event(PalletEvent::<T>::UnlockBlockUpdated {
+				block_number: unlock_block,
+			});
 			Ok(())
 		}
 	}
@@ -519,7 +522,7 @@ mod tests {
 		type AccountId = AccountId;
 		type Lookup = IdentityLookup<AccountId>;
 		type Header = Header;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type BlockHashCount = BlockHashCount;
 		type Version = ();
 		type PalletInfo = PalletInfo;
@@ -538,7 +541,7 @@ mod tests {
 
 	impl pallet_balances::Config for Test {
 		type Balance = u64;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type DustRemoval = ();
 		type ExistentialDeposit = ExistentialDeposit;
 		type AccountStore = System;
@@ -553,7 +556,7 @@ mod tests {
 	}
 
 	impl pallet_vesting::Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type Currency = Balances;
 		type BlockNumberToBalance = Identity;
 		type MinVestedTransfer = MinVestedTransfer;
@@ -574,7 +577,7 @@ mod tests {
 	}
 
 	impl Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type Currency = Balances;
 		type VestingSchedule = Vesting;
 		type ValidityOrigin = frame_system::EnsureSignedBy<ValidityOrigin, AccountId>;
diff --git a/runtime/common/src/slots/mod.rs b/runtime/common/src/slots/mod.rs
index 76054ac989f..2a52c8631cd 100644
--- a/runtime/common/src/slots/mod.rs
+++ b/runtime/common/src/slots/mod.rs
@@ -74,7 +74,8 @@ pub mod pallet {
 	#[pallet::config]
 	pub trait Config: frame_system::Config {
 		/// The overarching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// The currency type used for bidding.
 		type Currency: ReservableCurrency<Self::AccountId>;
@@ -120,7 +121,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// A new `[lease_period]` is beginning.
 		NewLeasePeriod { lease_period: LeasePeriodOf<T> },
 		/// A para has won the right to a continuous set of lease periods as a parachain.
@@ -227,7 +228,7 @@ impl<T: Config> Pallet<T> {
 	/// We need to on-board and off-board parachains as needed. We should also handle reducing/
 	/// returning deposits.
 	fn manage_lease_period_start(lease_period_index: LeasePeriodOf<T>) -> Weight {
-		Self::deposit_event(Event::<T>::NewLeasePeriod { lease_period: lease_period_index });
+		Self::deposit_event(PalletEvent::<T>::NewLeasePeriod { lease_period: lease_period_index });
 
 		let old_parachains = T::Registrar::parachains();
 
@@ -407,7 +408,7 @@ impl<T: Config> Leaser<T::BlockNumber> for Pallet<T> {
 				let _ = T::Registrar::make_parachain(para);
 			}
 
-			Self::deposit_event(Event::<T>::Leased {
+			Self::deposit_event(PalletEvent::<T>::Leased {
 				para_id: para,
 				leaser: leaser.clone(),
 				period_begin,
@@ -538,7 +539,7 @@ mod tests {
 		type AccountId = u64;
 		type Lookup = IdentityLookup<Self::AccountId>;
 		type Header = Header;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type BlockHashCount = BlockHashCount;
 		type DbWeight = ();
 		type Version = ();
@@ -558,7 +559,7 @@ mod tests {
 
 	impl pallet_balances::Config for Test {
 		type Balance = u64;
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type DustRemoval = ();
 		type ExistentialDeposit = ExistentialDeposit;
 		type AccountStore = System;
@@ -575,7 +576,7 @@ mod tests {
 	}
 
 	impl Config for Test {
-		type Event = Event;
+		type RuntimeEvent = RuntimeEvent;
 		type Currency = Balances;
 		type Registrar = TestRegistrar<Test>;
 		type LeasePeriod = LeasePeriod;
@@ -988,9 +989,9 @@ mod benchmarking {
 
 	use crate::slots::Pallet as Slots;
 
-	fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
+	fn assert_last_event<T: Config>(generic_event: <T as Config>::PalletEvent) {
 		let events = frame_system::Pallet::<T>::events();
-		let system_event: <T as frame_system::Config>::Event = generic_event.into();
+		let system_event: <T as frame_system::Config>::RuntimeEvent = generic_event.into();
 		// compare to the last event record
 		let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 		assert_eq!(event, &system_event);
@@ -1027,7 +1028,7 @@ mod benchmarking {
 			let origin = T::ForceOrigin::successful_origin();
 		}: _<T::Origin>(origin, para, leaser.clone(), amount, period_begin, period_count)
 		verify {
-			assert_last_event::<T>(Event::<T>::Leased {
+			assert_last_event::<T>(PalletEvent::<T>::Leased {
 				para_id: para,
 				leaser, period_begin,
 				period_count,
diff --git a/runtime/kusama/src/governance/old.rs b/runtime/kusama/src/governance/old.rs
index a87ddf6ec1f..b36380b4b3f 100644
--- a/runtime/kusama/src/governance/old.rs
+++ b/runtime/kusama/src/governance/old.rs
@@ -33,7 +33,7 @@ parameter_types! {
 
 impl pallet_democracy::Config for Runtime {
 	type Proposal = Call;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type EnactmentPeriod = EnactmentPeriod;
 	type VoteLockingPeriod = EnactmentPeriod;
@@ -94,7 +94,7 @@ pub type CouncilCollective = pallet_collective::Instance1;
 impl pallet_collective::Config<CouncilCollective> for Runtime {
 	type Origin = Origin;
 	type Proposal = Call;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MotionDuration = CouncilMotionDuration;
 	type MaxProposals = CouncilMaxProposals;
 	type MaxMembers = CouncilMaxMembers;
@@ -121,7 +121,7 @@ parameter_types! {
 const_assert!(DesiredMembers::get() <= CouncilMaxMembers::get());
 
 impl pallet_elections_phragmen::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type ChangeMembers = Council;
 	type InitializeMembers = Council;
@@ -150,7 +150,7 @@ pub type TechnicalCollective = pallet_collective::Instance2;
 impl pallet_collective::Config<TechnicalCollective> for Runtime {
 	type Origin = Origin;
 	type Proposal = Call;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MotionDuration = TechnicalMotionDuration;
 	type MaxProposals = TechnicalMaxProposals;
 	type MaxMembers = TechnicalMaxMembers;
@@ -159,7 +159,7 @@ impl pallet_collective::Config<TechnicalCollective> for Runtime {
 }
 
 impl pallet_membership::Config<pallet_membership::Instance1> for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type AddOrigin = MoreThanHalfCouncil;
 	type RemoveOrigin = MoreThanHalfCouncil;
 	type SwapOrigin = MoreThanHalfCouncil;
diff --git a/runtime/kusama/src/lib.rs b/runtime/kusama/src/lib.rs
index 12b9554c5cf..5e2fa13025c 100644
--- a/runtime/kusama/src/lib.rs
+++ b/runtime/kusama/src/lib.rs
@@ -175,7 +175,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = AccountIdLookup<AccountId, ()>;
 	type Header = generic::Header<BlockNumber, BlakeTwo256>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type DbWeight = RocksDbWeight;
 	type Version = Version;
@@ -225,7 +225,7 @@ impl PrivilegeCmp<OriginCaller> for OriginPrivilegeCmp {
 }
 
 impl pallet_scheduler::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type PalletsOrigin = OriginCaller;
 	type Call = Call;
@@ -246,7 +246,7 @@ parameter_types! {
 
 impl pallet_preimage::Config for Runtime {
 	type WeightInfo = weights::pallet_preimage::WeightInfo<Runtime>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type ManagerOrigin = EnsureRoot<AccountId>;
 	type MaxSize = PreimageMaxSize;
@@ -302,7 +302,7 @@ impl pallet_indices::Config for Runtime {
 	type AccountIndex = AccountIndex;
 	type Currency = Balances;
 	type Deposit = IndexDeposit;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::pallet_indices::WeightInfo<Runtime>;
 }
 
@@ -315,7 +315,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type Balance = Balance;
 	type DustRemoval = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
 	type MaxLocks = MaxLocks;
@@ -332,7 +332,7 @@ parameter_types! {
 }
 
 impl pallet_transaction_payment::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnChargeTransaction = CurrencyAdapter<Balances, DealWithFees<Self>>;
 	type OperationalFeeMultiplier = OperationalFeeMultiplier;
 	type WeightToFee = WeightToFee;
@@ -378,7 +378,7 @@ impl_opaque_keys! {
 }
 
 impl pallet_session::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorId = AccountId;
 	type ValidatorIdOf = pallet_staking::StashOf<Self>;
 	type ShouldEndSession = Babe;
@@ -468,7 +468,7 @@ impl pallet_election_provider_multi_phase::MinerConfig for Runtime {
 }
 
 impl pallet_election_provider_multi_phase::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type EstimateCallFee = TransactionPayment;
 	type UnsignedPhase = UnsignedPhase;
@@ -511,7 +511,7 @@ parameter_types! {
 }
 
 impl pallet_bags_list::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ScoreProvider = Staking;
 	type WeightInfo = weights::pallet_bags_list::WeightInfo<Runtime>;
 	type BagThresholds = BagThresholds;
@@ -607,7 +607,7 @@ impl pallet_staking::Config for Runtime {
 	type ElectionProvider = ElectionProviderMultiPhase;
 	type GenesisElectionProvider = onchain::UnboundedExecution<OnChainSeqPhragmen>;
 	type RewardRemainder = Treasury;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Slash = Treasury;
 	type Reward = ();
 	type SessionsPerEra = SessionsPerEra;
@@ -656,7 +656,7 @@ impl pallet_treasury::Config for Runtime {
 	type Currency = Balances;
 	type ApproveOrigin = ApproveOrigin;
 	type RejectOrigin = MoreThanHalfCouncil;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnSlash = Treasury;
 	type ProposalBond = ProposalBond;
 	type ProposalBondMinimum = ProposalBondMinimum;
@@ -691,7 +691,7 @@ impl pallet_bounties::Config for Runtime {
 	type BountyValueMinimum = BountyValueMinimum;
 	type ChildBountyManager = ChildBounties;
 	type DataDepositPerByte = DataDepositPerByte;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MaximumReasonLength = MaximumReasonLength;
 	type WeightInfo = weights::pallet_bounties::WeightInfo<Runtime>;
 }
@@ -702,7 +702,7 @@ parameter_types! {
 }
 
 impl pallet_child_bounties::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MaxActiveChildBountyCount = MaxActiveChildBountyCount;
 	type ChildBountyValueMinimum = ChildBountyValueMinimum;
 	type WeightInfo = weights::pallet_child_bounties::WeightInfo<Runtime>;
@@ -715,12 +715,12 @@ impl pallet_tips::Config for Runtime {
 	type TipCountdown = TipCountdown;
 	type TipFindersFee = TipFindersFee;
 	type TipReportDepositBase = TipReportDepositBase;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::pallet_tips::WeightInfo<Runtime>;
 }
 
 impl pallet_offences::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type IdentificationTuple = pallet_session::historical::IdentificationTuple<Self>;
 	type OnOffenceHandler = Staking;
 }
@@ -737,7 +737,7 @@ parameter_types! {
 
 impl pallet_im_online::Config for Runtime {
 	type AuthorityId = ImOnlineId;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorSet = Historical;
 	type NextSessionRotation = Babe;
 	type ReportUnresponsiveness = Offences;
@@ -749,7 +749,7 @@ impl pallet_im_online::Config for Runtime {
 }
 
 impl pallet_grandpa::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 
 	type KeyOwnerProof =
@@ -838,7 +838,7 @@ parameter_types! {
 }
 
 impl claims::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type VestingSchedule = Vesting;
 	type Prefix = Prefix;
 	type MoveClaimOrigin =
@@ -857,7 +857,7 @@ parameter_types! {
 }
 
 impl pallet_identity::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type BasicDeposit = BasicDeposit;
 	type FieldDeposit = FieldDeposit;
@@ -872,7 +872,7 @@ impl pallet_identity::Config for Runtime {
 }
 
 impl pallet_utility::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type PalletsOrigin = OriginCaller;
 	type WeightInfo = weights::pallet_utility::WeightInfo<Runtime>;
@@ -887,7 +887,7 @@ parameter_types! {
 }
 
 impl pallet_multisig::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type DepositBase = DepositBase;
@@ -904,7 +904,7 @@ parameter_types! {
 }
 
 impl pallet_recovery::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = ();
 	type Call = Call;
 	type Currency = Balances;
@@ -927,7 +927,7 @@ parameter_types! {
 }
 
 impl pallet_society::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type Randomness = pallet_babe::RandomnessFromOneEpochAgo<Runtime>;
 	type CandidateDeposit = CandidateDeposit;
@@ -950,7 +950,7 @@ parameter_types! {
 }
 
 impl pallet_vesting::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type BlockNumberToBalance = ConvertInto;
 	type MinVestedTransfer = MinVestedTransfer;
@@ -1094,7 +1094,7 @@ impl InstanceFilter<Call> for ProxyType {
 }
 
 impl pallet_proxy::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type ProxyType = ProxyType;
@@ -1121,7 +1121,7 @@ impl parachains_session_info::Config for Runtime {
 }
 
 impl parachains_inclusion::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DisputesHandler = ParasDisputes;
 	type RewardValidators = parachains_reward_points::RewardValidatorsWithEraPoints<Runtime>;
 }
@@ -1131,7 +1131,7 @@ parameter_types! {
 }
 
 impl parachains_paras::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::runtime_parachains_paras::WeightInfo<Runtime>;
 	type UnsignedPriority = ParasUnsignedPriority;
 	type NextSessionRotation = Babe;
@@ -1142,7 +1142,7 @@ parameter_types! {
 }
 
 impl parachains_ump::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink =
 		crate::parachains_ump::XcmSink<xcm_executor::XcmExecutor<xcm_config::XcmConfig>, Runtime>;
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
@@ -1153,7 +1153,7 @@ impl parachains_ump::Config for Runtime {
 impl parachains_dmp::Config for Runtime {}
 
 impl parachains_hrmp::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type WeightInfo = weights::runtime_parachains_hrmp::WeightInfo<Self>;
@@ -1172,7 +1172,7 @@ impl parachains_initializer::Config for Runtime {
 }
 
 impl parachains_disputes::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type RewardValidators = ();
 	type PunishValidators = ();
 	type WeightInfo = weights::runtime_parachains_disputes::WeightInfo<Runtime>;
@@ -1183,7 +1183,7 @@ parameter_types! {
 }
 
 impl paras_registrar::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type OnSwap = (Crowdloan, Slots);
@@ -1198,7 +1198,7 @@ parameter_types! {
 }
 
 impl slots::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type Registrar = Registrar;
 	type LeasePeriod = LeasePeriod;
@@ -1217,7 +1217,7 @@ parameter_types! {
 }
 
 impl crowdloan::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type PalletId = CrowdloanId;
 	type SubmissionDeposit = SubmissionDeposit;
 	type MinContribution = MinContribution;
@@ -1242,7 +1242,7 @@ type AuctionInitiate = EitherOfDiverse<
 >;
 
 impl auctions::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Leaser = Slots;
 	type Registrar = Registrar;
 	type EndingPeriod = EndingPeriod;
@@ -1264,7 +1264,7 @@ parameter_types! {
 }
 
 impl pallet_gilt::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type CurrencyBalance = Balance;
 	type AdminOrigin = MoreThanHalfCouncil;
@@ -1287,7 +1287,7 @@ parameter_types! {
 }
 
 impl pallet_nomination_pools::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::pallet_nomination_pools::WeightInfo<Self>;
 	type Currency = Balances;
 	type CurrencyBalance = Balance;
@@ -1621,7 +1621,7 @@ sp_api::impl_runtime_apis! {
 		fn candidate_events() -> Vec<CandidateEvent<Hash>> {
 			parachains_runtime_api_impl::candidate_events::<Runtime, _>(|ev| {
 				match ev {
-					Event::ParaInclusion(ev) => {
+					RuntimeEvent::ParaInclusion(ev) => {
 						Some(ev)
 					}
 					_ => None,
diff --git a/runtime/kusama/src/xcm_config.rs b/runtime/kusama/src/xcm_config.rs
index 5bf45cfc89c..05c892d16bd 100644
--- a/runtime/kusama/src/xcm_config.rs
+++ b/runtime/kusama/src/xcm_config.rs
@@ -17,8 +17,8 @@
 //! XCM configurations for the Kusama runtime.
 
 use super::{
-	parachains_origin, AccountId, Balances, Call, CouncilCollective, Event, Origin, ParaId,
-	Runtime, WeightToFee, XcmPallet,
+	parachains_origin, AccountId, Balances, Call, CouncilCollective, Origin, ParaId, Runtime,
+	RuntimeEvent, WeightToFee, XcmPallet,
 };
 use frame_support::{match_types, parameter_types, traits::Everything, weights::Weight};
 use runtime_common::{xcm_sender, ToAuthor};
@@ -169,7 +169,7 @@ pub type LocalOriginToLocation = (
 	SignedToAccountId32<Origin, AccountId, KusamaNetwork>,
 );
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	// We only allow the council to send messages. This is basically safe to enable for everyone
 	// (safe the possibility of someone spamming the parachain if they're willing to pay the KSM to
 	// send from the Relay-chain), but it's useless until we bring in XCM v3 which will make
diff --git a/runtime/parachains/src/disputes.rs b/runtime/parachains/src/disputes.rs
index aec60a4eb0f..f9cdfe92010 100644
--- a/runtime/parachains/src/disputes.rs
+++ b/runtime/parachains/src/disputes.rs
@@ -410,7 +410,8 @@ pub mod pallet {
 
 	#[pallet::config]
 	pub trait Config: frame_system::Config + configuration::Config + session_info::Config {
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 		type RewardValidators: RewardValidators;
 		type PunishValidators: PunishValidators;
 
@@ -468,7 +469,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// A dispute has been initiated. \[candidate hash, dispute location\]
 		DisputeInitiated(CandidateHash, DisputeLocation),
 		/// A dispute has concluded for or against a candidate.
@@ -804,7 +805,7 @@ impl<T: Config> Pallet<T> {
 			if dispute.concluded_at.is_none() &&
 				dispute.start + config.dispute_conclusion_by_time_out_period < now
 			{
-				Self::deposit_event(Event::DisputeTimedOut(candidate_hash));
+				Self::deposit_event(PalletEvent::DisputeTimedOut(candidate_hash));
 
 				dispute.concluded_at = Some(now);
 				<Disputes<T>>::insert(session_index, candidate_hash, &dispute);
@@ -1195,7 +1196,7 @@ impl<T: Config> Pallet<T> {
 		if fresh {
 			let is_local = <Included<T>>::contains_key(&session, &candidate_hash);
 
-			Self::deposit_event(Event::DisputeInitiated(
+			Self::deposit_event(PalletEvent::DisputeInitiated(
 				candidate_hash,
 				if is_local { DisputeLocation::Local } else { DisputeLocation::Remote },
 			));
@@ -1203,7 +1204,10 @@ impl<T: Config> Pallet<T> {
 
 		{
 			if summary.new_flags.contains(DisputeStateFlags::FOR_SUPERMAJORITY) {
-				Self::deposit_event(Event::DisputeConcluded(candidate_hash, DisputeResult::Valid));
+				Self::deposit_event(PalletEvent::DisputeConcluded(
+					candidate_hash,
+					DisputeResult::Valid,
+				));
 			}
 
 			// It is possible, although unexpected, for a dispute to conclude twice.
@@ -1211,7 +1215,7 @@ impl<T: Config> Pallet<T> {
 			// A dispute cannot conclude more than once in each direction.
 
 			if summary.new_flags.contains(DisputeStateFlags::AGAINST_SUPERMAJORITY) {
-				Self::deposit_event(Event::DisputeConcluded(
+				Self::deposit_event(PalletEvent::DisputeConcluded(
 					candidate_hash,
 					DisputeResult::Invalid,
 				));
@@ -1304,7 +1308,7 @@ impl<T: Config> Pallet<T> {
 			// If we want to revert to block X in the current chain, we need to revert
 			// block X+1.
 			let revert = revert_to + One::one();
-			Self::deposit_event(Event::Revert(revert));
+			Self::deposit_event(PalletEvent::Revert(revert));
 			frame_system::Pallet::<T>::deposit_log(
 				ConsensusLog::Revert(revert.saturated_into()).into(),
 			);
diff --git a/runtime/parachains/src/disputes/tests.rs b/runtime/parachains/src/disputes/tests.rs
index 2897ced22ed..937f45546a5 100644
--- a/runtime/parachains/src/disputes/tests.rs
+++ b/runtime/parachains/src/disputes/tests.rs
@@ -1341,7 +1341,7 @@ fn test_revert_and_freeze() {
 
 		assert_eq!(Frozen::<Test>::get(), Some(0));
 		assert_eq!(System::digest().logs[0], ConsensusLog::Revert(1).into());
-		System::assert_has_event(Event::Revert(1).into());
+		System::assert_has_event(PalletEvent::Revert(1).into());
 	})
 }
 
diff --git a/runtime/parachains/src/hrmp.rs b/runtime/parachains/src/hrmp.rs
index d18c2b3fc49..d8fa87015a8 100644
--- a/runtime/parachains/src/hrmp.rs
+++ b/runtime/parachains/src/hrmp.rs
@@ -239,7 +239,8 @@ pub mod pallet {
 		frame_system::Config + configuration::Config + paras::Config + dmp::Config
 	{
 		/// The outer event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		type Origin: From<crate::Origin>
 			+ From<<Self as frame_system::Config>::Origin>
@@ -258,7 +259,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// Open HRMP channel requested.
 		/// `[sender, recipient, proposed_max_capacity, proposed_max_message_size]`
 		OpenChannelRequested(ParaId, ParaId, u32, u32),
@@ -472,7 +473,7 @@ pub mod pallet {
 				proposed_max_capacity,
 				proposed_max_message_size,
 			)?;
-			Self::deposit_event(Event::OpenChannelRequested(
+			Self::deposit_event(PalletEvent::OpenChannelRequested(
 				origin,
 				recipient,
 				proposed_max_capacity,
@@ -488,7 +489,7 @@ pub mod pallet {
 		pub fn hrmp_accept_open_channel(origin: OriginFor<T>, sender: ParaId) -> DispatchResult {
 			let origin = ensure_parachain(<T as Config>::Origin::from(origin))?;
 			Self::accept_open_channel(origin, sender)?;
-			Self::deposit_event(Event::OpenChannelAccepted(sender, origin));
+			Self::deposit_event(PalletEvent::OpenChannelAccepted(sender, origin));
 			Ok(())
 		}
 
@@ -503,7 +504,7 @@ pub mod pallet {
 		) -> DispatchResult {
 			let origin = ensure_parachain(<T as Config>::Origin::from(origin))?;
 			Self::close_channel(origin, channel_id.clone())?;
-			Self::deposit_event(Event::ChannelClosed(origin, channel_id));
+			Self::deposit_event(PalletEvent::ChannelClosed(origin, channel_id));
 			Ok(())
 		}
 
@@ -574,7 +575,7 @@ pub mod pallet {
 				Error::<T>::WrongWitness
 			);
 			Self::cancel_open_request(origin, channel_id.clone())?;
-			Self::deposit_event(Event::OpenChannelCanceled(origin, channel_id));
+			Self::deposit_event(PalletEvent::OpenChannelCanceled(origin, channel_id));
 			Ok(())
 		}
 	}
diff --git a/runtime/parachains/src/hrmp/benchmarking.rs b/runtime/parachains/src/hrmp/benchmarking.rs
index 3486e990fe5..321b9213561 100644
--- a/runtime/parachains/src/hrmp/benchmarking.rs
+++ b/runtime/parachains/src/hrmp/benchmarking.rs
@@ -39,9 +39,9 @@ fn register_parachain_with_balance<T: Config>(id: ParaId, balance: BalanceOf<T>)
 	T::Currency::make_free_balance_be(&id.into_account_truncating(), balance);
 }
 
-fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
+fn assert_last_event<T: Config>(generic_event: <T as Config>::PalletEvent) {
 	let events = frame_system::Pallet::<T>::events();
-	let system_event: <T as frame_system::Config>::Event = generic_event.into();
+	let system_event: <T as frame_system::Config>::RuntimeEvent = generic_event.into();
 	// compare to the last event record
 	let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 	assert_eq!(event, &system_event);
@@ -156,7 +156,7 @@ frame_benchmarking::benchmarks! {
 	}: _(sender_origin, recipient_id, capacity, message_size)
 	verify {
 		assert_last_event::<T>(
-			Event::<T>::OpenChannelRequested(sender_id, recipient_id, capacity, message_size).into()
+			PalletEvent::<T>::OpenChannelRequested(sender_id, recipient_id, capacity, message_size).into()
 		);
 	}
 
@@ -165,7 +165,7 @@ frame_benchmarking::benchmarks! {
 			establish_para_connection::<T>(1, 2, ParachainSetupStep::Requested);
 	}: _(recipient_origin, sender)
 	verify {
-		assert_last_event::<T>(Event::<T>::OpenChannelAccepted(sender, recipient).into());
+		assert_last_event::<T>(PalletEvent::<T>::OpenChannelAccepted(sender, recipient).into());
 	}
 
 	hrmp_close_channel {
@@ -174,7 +174,7 @@ frame_benchmarking::benchmarks! {
 		let channel_id = HrmpChannelId { sender, recipient };
 	}: _(sender_origin, channel_id.clone())
 	verify {
-		assert_last_event::<T>(Event::<T>::ChannelClosed(sender, channel_id).into());
+		assert_last_event::<T>(PalletEvent::<T>::ChannelClosed(sender, channel_id).into());
 	}
 
 	// NOTE: a single parachain should have the maximum number of allowed ingress and egress
diff --git a/runtime/parachains/src/hrmp/tests.rs b/runtime/parachains/src/hrmp/tests.rs
index 463c5eb3938..18355ad73f7 100644
--- a/runtime/parachains/src/hrmp/tests.rs
+++ b/runtime/parachains/src/hrmp/tests.rs
@@ -16,8 +16,8 @@
 
 use super::*;
 use crate::mock::{
-	new_test_ext, Configuration, Event as MockEvent, Hrmp, MockGenesisConfig, Paras, ParasShared,
-	System, Test,
+	new_test_ext, Configuration, Hrmp, MockGenesisConfig, Paras, ParasShared,
+	RuntimeEvent as MockEvent, System, Test,
 };
 use frame_support::{assert_noop, assert_ok, traits::Currency as _};
 use primitives::v2::BlockNumber;
@@ -173,14 +173,12 @@ fn open_channel_works() {
 		Hrmp::hrmp_init_open_channel(para_a_origin.into(), para_b, 2, 8).unwrap();
 		Hrmp::assert_storage_consistency_exhaustive();
 		assert!(System::events().iter().any(|record| record.event ==
-			MockEvent::Hrmp(Event::OpenChannelRequested(para_a, para_b, 2, 8))));
+			MockEvent::Hrmp(PalletEvent::OpenChannelRequested(para_a, para_b, 2, 8))));
 
 		Hrmp::hrmp_accept_open_channel(para_b_origin.into(), para_a).unwrap();
 		Hrmp::assert_storage_consistency_exhaustive();
-		assert!(System::events()
-			.iter()
-			.any(|record| record.event ==
-				MockEvent::Hrmp(Event::OpenChannelAccepted(para_a, para_b))));
+		assert!(System::events().iter().any(|record| record.event ==
+			MockEvent::Hrmp(PalletEvent::OpenChannelAccepted(para_a, para_b))));
 
 		// Advance to a block 6, but without session change. That means that the channel has
 		// not been created yet.
@@ -223,7 +221,7 @@ fn close_channel_works() {
 		assert!(!channel_exists(para_a, para_b));
 		Hrmp::assert_storage_consistency_exhaustive();
 		assert!(System::events().iter().any(|record| record.event ==
-			MockEvent::Hrmp(Event::ChannelClosed(para_b, channel_id.clone()))));
+			MockEvent::Hrmp(PalletEvent::ChannelClosed(para_b, channel_id.clone()))));
 	});
 }
 
diff --git a/runtime/parachains/src/inclusion/mod.rs b/runtime/parachains/src/inclusion/mod.rs
index c936b54eecf..39ef43be165 100644
--- a/runtime/parachains/src/inclusion/mod.rs
+++ b/runtime/parachains/src/inclusion/mod.rs
@@ -198,14 +198,15 @@ pub mod pallet {
 		+ hrmp::Config
 		+ configuration::Config
 	{
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 		type DisputesHandler: disputes::DisputesHandler<Self::BlockNumber>;
 		type RewardValidators: RewardValidators;
 	}
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// A candidate was backed. `[candidate, head_data]`
 		CandidateBacked(CandidateReceipt<T::Hash>, HeadData, CoreIndex, GroupIndex),
 		/// A candidate was included. `[candidate, head_data]`
@@ -655,7 +656,7 @@ impl<T: Config> Pallet<T> {
 			let availability_votes: BitVec<u8, BitOrderLsb0> =
 				bitvec::bitvec![u8, BitOrderLsb0; 0; validators.len()];
 
-			Self::deposit_event(Event::<T>::CandidateBacked(
+			Self::deposit_event(PalletEvent::<T>::CandidateBacked(
 				candidate.candidate.to_plain(),
 				candidate.candidate.commitments.head_data.clone(),
 				core,
@@ -778,7 +779,7 @@ impl<T: Config> Pallet<T> {
 			commitments.horizontal_messages,
 		);
 
-		Self::deposit_event(Event::<T>::CandidateIncluded(
+		Self::deposit_event(PalletEvent::<T>::CandidateIncluded(
 			plain,
 			commitments.head_data.clone(),
 			core_index,
@@ -823,7 +824,7 @@ impl<T: Config> Pallet<T> {
 					commitments_hash: commitments.hash(),
 				};
 
-				Self::deposit_event(Event::<T>::CandidateTimedOut(
+				Self::deposit_event(PalletEvent::<T>::CandidateTimedOut(
 					candidate,
 					commitments.head_data,
 					pending.core,
diff --git a/runtime/parachains/src/mock.rs b/runtime/parachains/src/mock.rs
index 064b9918ff5..cbb7e01dd31 100644
--- a/runtime/parachains/src/mock.rs
+++ b/runtime/parachains/src/mock.rs
@@ -101,7 +101,7 @@ impl frame_system::Config for Test {
 	type AccountId = u64;
 	type Lookup = IdentityLookup<u64>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type Version = ();
 	type PalletInfo = PalletInfo;
@@ -123,7 +123,7 @@ impl pallet_balances::Config for Test {
 	type MaxReserves = ();
 	type ReserveIdentifier = [u8; 8];
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -213,7 +213,7 @@ impl frame_support::traits::EstimateNextSessionRotation<u32> for TestNextSession
 }
 
 impl crate::paras::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = crate::paras::TestWeightInfo;
 	type UnsignedPriority = ParasUnsignedPriority;
 	type NextSessionRotation = TestNextSessionRotation;
@@ -226,7 +226,7 @@ parameter_types! {
 }
 
 impl crate::ump::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink = TestUmpSink;
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
 	type ExecuteOverweightOrigin = frame_system::EnsureRoot<AccountId>;
@@ -234,14 +234,14 @@ impl crate::ump::Config for Test {
 }
 
 impl crate::hrmp::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = pallet_balances::Pallet<Test>;
 	type WeightInfo = crate::hrmp::TestWeightInfo;
 }
 
 impl crate::disputes::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type RewardValidators = Self;
 	type PunishValidators = Self;
 	type WeightInfo = crate::disputes::TestWeightInfo;
@@ -292,7 +292,7 @@ impl crate::disputes::PunishValidators for Test {
 impl crate::scheduler::Config for Test {}
 
 impl crate::inclusion::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DisputesHandler = Disputes;
 	type RewardValidators = TestRewardValidators;
 }
@@ -455,9 +455,9 @@ pub struct MockGenesisConfig {
 	pub paras: crate::paras::GenesisConfig,
 }
 
-pub fn assert_last_event(generic_event: Event) {
+pub fn assert_last_event(generic_event: RuntimeEvent) {
 	let events = frame_system::Pallet::<Test>::events();
-	let system_event: <Test as frame_system::Config>::Event = generic_event.into();
+	let system_event: <Test as frame_system::Config>::RuntimeEvent = generic_event.into();
 	// compare to the last event record
 	let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 	assert_eq!(event, &system_event);
diff --git a/runtime/parachains/src/paras/benchmarking.rs b/runtime/parachains/src/paras/benchmarking.rs
index 9d31453638a..283cc3d35b0 100644
--- a/runtime/parachains/src/paras/benchmarking.rs
+++ b/runtime/parachains/src/paras/benchmarking.rs
@@ -31,9 +31,9 @@ use self::pvf_check::{VoteCause, VoteOutcome};
 // shouldn't exceed this number.
 const SAMPLE_SIZE: u32 = 1024;
 
-fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
+fn assert_last_event<T: Config>(generic_event: <T as Config>::PalletEvent) {
 	let events = frame_system::Pallet::<T>::events();
-	let system_event: <T as frame_system::Config>::Event = generic_event.into();
+	let system_event: <T as frame_system::Config>::RuntimeEvent = generic_event.into();
 	// compare to the last event record
 	let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 	assert_eq!(event, &system_event);
@@ -89,7 +89,7 @@ benchmarks! {
 		generate_disordered_pruning::<T>();
 	}: _(RawOrigin::Root, para_id, new_code)
 	verify {
-		assert_last_event::<T>(Event::CurrentCodeUpdated(para_id).into());
+		assert_last_event::<T>(PalletEvent::CurrentCodeUpdated(para_id).into());
 	}
 	force_set_current_head {
 		let s in 1 .. MAX_HEAD_DATA_SIZE;
@@ -97,7 +97,7 @@ benchmarks! {
 		let para_id = ParaId::from(1000);
 	}: _(RawOrigin::Root, para_id, new_head)
 	verify {
-		assert_last_event::<T>(Event::CurrentHeadUpdated(para_id).into());
+		assert_last_event::<T>(PalletEvent::CurrentHeadUpdated(para_id).into());
 	}
 	force_schedule_code_upgrade {
 		let c in 1 .. MAX_CODE_SIZE;
@@ -107,7 +107,7 @@ benchmarks! {
 		generate_disordered_upgrades::<T>();
 	}: _(RawOrigin::Root, para_id, new_code, block)
 	verify {
-		assert_last_event::<T>(Event::CodeUpgradeScheduled(para_id).into());
+		assert_last_event::<T>(PalletEvent::CodeUpgradeScheduled(para_id).into());
 	}
 	force_note_new_head {
 		let s in 1 .. MAX_HEAD_DATA_SIZE;
@@ -123,7 +123,7 @@ benchmarks! {
 		Pallet::<T>::schedule_code_upgrade(para_id, ValidationCode(vec![0]), expired, &config);
 	}: _(RawOrigin::Root, para_id, new_head)
 	verify {
-		assert_last_event::<T>(Event::NewHeadNoted(para_id).into());
+		assert_last_event::<T>(PalletEvent::NewHeadNoted(para_id).into());
 	}
 	force_queue_action {
 		let para_id = ParaId::from(1000);
@@ -131,7 +131,7 @@ benchmarks! {
 	}: _(RawOrigin::Root, para_id)
 	verify {
 		let next_session = crate::shared::Pallet::<T>::session_index().saturating_add(One::one());
-		assert_last_event::<T>(Event::ActionQueued(para_id, next_session).into());
+		assert_last_event::<T>(PalletEvent::ActionQueued(para_id, next_session).into());
 	}
 
 	add_trusted_validation_code {
diff --git a/runtime/parachains/src/paras/mod.rs b/runtime/parachains/src/paras/mod.rs
index 3c5b8247939..0075171b465 100644
--- a/runtime/parachains/src/paras/mod.rs
+++ b/runtime/parachains/src/paras/mod.rs
@@ -473,7 +473,7 @@ pub mod pallet {
 		+ shared::Config
 		+ frame_system::offchain::SendTransactionTypes<Call<Self>>
 	{
-		type Event: From<Event> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		#[pallet::constant]
 		type UnsignedPriority: Get<TransactionPriority>;
@@ -486,7 +486,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event {
+	pub enum PalletEvent {
 		/// Current code has been updated for a Para. `para_id`
 		CurrentCodeUpdated(ParaId),
 		/// Current head has been updated for a Para. `para_id`
@@ -740,7 +740,7 @@ pub mod pallet {
 					&para
 				);
 			}
-			Self::deposit_event(Event::CurrentCodeUpdated(para));
+			Self::deposit_event(PalletEvent::CurrentCodeUpdated(para));
 			Ok(())
 		}
 
@@ -753,7 +753,7 @@ pub mod pallet {
 		) -> DispatchResult {
 			ensure_root(origin)?;
 			<Self as Store>::Heads::insert(&para, new_head);
-			Self::deposit_event(Event::CurrentHeadUpdated(para));
+			Self::deposit_event(PalletEvent::CurrentHeadUpdated(para));
 			Ok(())
 		}
 
@@ -768,7 +768,7 @@ pub mod pallet {
 			ensure_root(origin)?;
 			let config = configuration::Pallet::<T>::config();
 			Self::schedule_code_upgrade(para, new_code, relay_parent_number, &config);
-			Self::deposit_event(Event::CodeUpgradeScheduled(para));
+			Self::deposit_event(PalletEvent::CodeUpgradeScheduled(para));
 			Ok(())
 		}
 
@@ -782,7 +782,7 @@ pub mod pallet {
 			ensure_root(origin)?;
 			let now = frame_system::Pallet::<T>::block_number();
 			Self::note_new_head(para, new_head, now);
-			Self::deposit_event(Event::NewHeadNoted(para));
+			Self::deposit_event(PalletEvent::NewHeadNoted(para));
 			Ok(())
 		}
 
@@ -798,7 +798,7 @@ pub mod pallet {
 					v.insert(i, para);
 				}
 			});
-			Self::deposit_event(Event::ActionQueued(para, next_session));
+			Self::deposit_event(PalletEvent::ActionQueued(para, next_session));
 			Ok(())
 		}
 
@@ -1375,7 +1375,7 @@ impl<T: Config> Pallet<T> {
 		let mut weight = 0;
 		for cause in causes {
 			weight += T::DbWeight::get().reads_writes(3, 2);
-			Self::deposit_event(Event::PvfCheckAccepted(*code_hash, cause.para_id()));
+			Self::deposit_event(PalletEvent::PvfCheckAccepted(*code_hash, cause.para_id()));
 
 			match cause {
 				PvfCheckCause::Onboarding(id) => {
@@ -1465,7 +1465,7 @@ impl<T: Config> Pallet<T> {
 			weight += Self::decrease_code_ref(code_hash);
 
 			weight += T::DbWeight::get().reads_writes(3, 2);
-			Self::deposit_event(Event::PvfCheckRejected(*code_hash, cause.para_id()));
+			Self::deposit_event(PalletEvent::PvfCheckRejected(*code_hash, cause.para_id()));
 
 			match cause {
 				PvfCheckCause::Onboarding(id) => {
@@ -1749,7 +1749,7 @@ impl<T: Config> Pallet<T> {
 		let mut weight = 0;
 
 		weight += T::DbWeight::get().reads_writes(3, 2);
-		Self::deposit_event(Event::PvfCheckStarted(code_hash, cause.para_id()));
+		Self::deposit_event(PalletEvent::PvfCheckStarted(code_hash, cause.para_id()));
 
 		weight += T::DbWeight::get().reads(1);
 		match PvfActiveVoteMap::<T>::get(&code_hash) {
diff --git a/runtime/parachains/src/paras/tests.rs b/runtime/parachains/src/paras/tests.rs
index 960132d5f80..32e0004049d 100644
--- a/runtime/parachains/src/paras/tests.rs
+++ b/runtime/parachains/src/paras/tests.rs
@@ -112,8 +112,12 @@ fn check_code_is_not_stored(validation_code: &ValidationCode) {
 
 /// An utility for checking that certain events were deposited.
 struct EventValidator {
-	events:
-		Vec<frame_system::EventRecord<<Test as frame_system::Config>::Event, primitives::v2::Hash>>,
+	events: Vec<
+		frame_system::EventRecord<
+			<Test as frame_system::Config>::RuntimeEvent,
+			primitives::v2::Hash,
+		>,
+	>,
 }
 
 impl EventValidator {
@@ -124,7 +128,7 @@ impl EventValidator {
 	fn started(&mut self, code: &ValidationCode, id: ParaId) -> &mut Self {
 		self.events.push(frame_system::EventRecord {
 			phase: frame_system::Phase::Initialization,
-			event: Event::PvfCheckStarted(code.hash(), id).into(),
+			event: PalletEvent::PvfCheckStarted(code.hash(), id).into(),
 			topics: vec![],
 		});
 		self
@@ -133,7 +137,7 @@ impl EventValidator {
 	fn rejected(&mut self, code: &ValidationCode, id: ParaId) -> &mut Self {
 		self.events.push(frame_system::EventRecord {
 			phase: frame_system::Phase::Initialization,
-			event: Event::PvfCheckRejected(code.hash(), id).into(),
+			event: PalletEvent::PvfCheckRejected(code.hash(), id).into(),
 			topics: vec![],
 		});
 		self
@@ -142,7 +146,7 @@ impl EventValidator {
 	fn accepted(&mut self, code: &ValidationCode, id: ParaId) -> &mut Self {
 		self.events.push(frame_system::EventRecord {
 			phase: frame_system::Phase::Initialization,
-			event: Event::PvfCheckAccepted(code.hash(), id).into(),
+			event: PalletEvent::PvfCheckAccepted(code.hash(), id).into(),
 			topics: vec![],
 		});
 		self
diff --git a/runtime/parachains/src/runtime_api_impl/v2.rs b/runtime/parachains/src/runtime_api_impl/v2.rs
index 20ee41636d8..e13506de62a 100644
--- a/runtime/parachains/src/runtime_api_impl/v2.rs
+++ b/runtime/parachains/src/runtime_api_impl/v2.rs
@@ -323,9 +323,9 @@ pub fn candidate_pending_availability<T: initializer::Config>(
 pub fn candidate_events<T, F>(extract_event: F) -> Vec<CandidateEvent<T::Hash>>
 where
 	T: initializer::Config,
-	F: Fn(<T as frame_system::Config>::Event) -> Option<inclusion::Event<T>>,
+	F: Fn(<T as frame_system::Config>::RuntimeEvent) -> Option<inclusion::PalletEvent<T>>,
 {
-	use inclusion::Event as RawEvent;
+	use inclusion::PalletEvent as RawEvent;
 
 	<frame_system::Pallet<T>>::read_events_no_consensus()
 		.into_iter()
diff --git a/runtime/parachains/src/ump.rs b/runtime/parachains/src/ump.rs
index 7d40a99e988..71b05d53420 100644
--- a/runtime/parachains/src/ump.rs
+++ b/runtime/parachains/src/ump.rs
@@ -122,11 +122,11 @@ impl<XcmExecutor: xcm::latest::ExecuteXcm<C::Call>, C: Config> UmpSink for XcmSi
 		});
 		match maybe_msg_and_weight {
 			Err(_) => {
-				Pallet::<C>::deposit_event(Event::InvalidFormat(id));
+				Pallet::<C>::deposit_event(PalletEvent::InvalidFormat(id));
 				Ok(0)
 			},
 			Ok((Err(()), weight_used)) => {
-				Pallet::<C>::deposit_event(Event::UnsupportedVersion(id));
+				Pallet::<C>::deposit_event(PalletEvent::UnsupportedVersion(id));
 				Ok(weight_used)
 			},
 			Ok((Ok(xcm_message), weight_used)) => {
@@ -136,7 +136,7 @@ impl<XcmExecutor: xcm::latest::ExecuteXcm<C::Call>, C: Config> UmpSink for XcmSi
 					Outcome::Error(XcmError::WeightLimitReached(required)) => Err((id, required)),
 					outcome => {
 						let outcome_weight = outcome.weight_used();
-						Pallet::<C>::deposit_event(Event::ExecutedUpward(id, outcome));
+						Pallet::<C>::deposit_event(PalletEvent::ExecutedUpward(id, outcome));
 						Ok(weight_used.saturating_add(outcome_weight))
 					},
 				}
@@ -216,7 +216,7 @@ pub mod pallet {
 	#[pallet::config]
 	pub trait Config: frame_system::Config + configuration::Config {
 		/// The aggregate event.
-		type Event: From<Event> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// A place where all received upward messages are funneled.
 		type UmpSink: UmpSink;
@@ -238,7 +238,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event {
+	pub enum PalletEvent {
 		/// Upward message is invalid XCM.
 		/// \[ id \]
 		InvalidFormat(MessageId),
@@ -358,7 +358,7 @@ pub mod pallet {
 			let used = T::UmpSink::process_upward_message(sender, &data[..], weight_limit)
 				.map_err(|_| Error::<T>::WeightOverLimit)?;
 			Overweight::<T>::remove(index);
-			Self::deposit_event(Event::OverweightServiced(index, used));
+			Self::deposit_event(PalletEvent::OverweightServiced(index, used));
 			Ok(Some(used.saturating_add(<T as Config>::WeightInfo::service_overweight())).into())
 		}
 	}
@@ -495,7 +495,7 @@ impl<T: Config> Pallet<T> {
 			// NOTE: The actual computation is not accounted for. It should be benchmarked.
 			weight += T::DbWeight::get().reads_writes(3, 3);
 
-			Self::deposit_event(Event::UpwardMessagesReceived(para, extra_count, extra_size));
+			Self::deposit_event(PalletEvent::UpwardMessagesReceived(para, extra_count, extra_size));
 		}
 
 		weight
@@ -544,13 +544,15 @@ impl<T: Config> Pallet<T> {
 								thus `upward_message` cannot be `None`; qed",
 							);
 							let index = Self::stash_overweight(dispatchee, upward_message);
-							Self::deposit_event(Event::OverweightEnqueued(
+							Self::deposit_event(PalletEvent::OverweightEnqueued(
 								dispatchee, id, index, required,
 							));
 						} else {
 							// we process messages in order and don't drop them if we run out of weight,
 							// so need to break here without calling `consume_front`.
-							Self::deposit_event(Event::WeightExhausted(id, max_weight, required));
+							Self::deposit_event(PalletEvent::WeightExhausted(
+								id, max_weight, required,
+							));
 							break
 						}
 					},
diff --git a/runtime/parachains/src/ump/benchmarking.rs b/runtime/parachains/src/ump/benchmarking.rs
index 2c132324d44..513e16cb6fb 100644
--- a/runtime/parachains/src/ump/benchmarking.rs
+++ b/runtime/parachains/src/ump/benchmarking.rs
@@ -18,9 +18,9 @@ use super::{Pallet as Ump, *};
 use frame_system::RawOrigin;
 use xcm::prelude::*;
 
-fn assert_last_event_type<T: Config>(generic_event: <T as Config>::Event) {
+fn assert_last_event_type<T: Config>(generic_event: <T as Config>::PalletEvent) {
 	let events = frame_system::Pallet::<T>::events();
-	let system_event: <T as frame_system::Config>::Event = generic_event.into();
+	let system_event: <T as frame_system::Config>::RuntimeEvent = generic_event.into();
 	// compare to the last event record
 	let frame_system::EventRecord { event, .. } = &events[events.len() - 1];
 	assert_eq!(sp_std::mem::discriminant(event), sp_std::mem::discriminant(&system_event));
@@ -35,7 +35,7 @@ fn queue_upward_msg<T: Config>(
 	let msgs = vec![msg];
 	Ump::<T>::check_upward_messages(host_conf, para, &msgs).unwrap();
 	let _ = Ump::<T>::receive_upward_messages(para, msgs);
-	assert_last_event_type::<T>(Event::UpwardMessagesReceived(para, 1, len).into());
+	assert_last_event_type::<T>(PalletEvent::UpwardMessagesReceived(para, 1, len).into());
 }
 
 // Create a message with at least `size` bytes encoded length
@@ -124,11 +124,11 @@ frame_benchmarking::benchmarks! {
 		queue_upward_msg::<T>(&host_conf, para, msg.clone());
 		Ump::<T>::process_pending_upward_messages();
 		assert_last_event_type::<T>(
-			Event::OverweightEnqueued(para, upward_message_id(&msg), 0, 0).into()
+			PalletEvent::OverweightEnqueued(para, upward_message_id(&msg), 0, 0).into()
 			);
 	}: _(RawOrigin::Root, 0, Weight::MAX)
 	verify {
-		assert_last_event_type::<T>(Event::OverweightServiced(0, 0).into());
+		assert_last_event_type::<T>(PalletEvent::OverweightServiced(0, 0).into());
 	}
 }
 
diff --git a/runtime/parachains/src/ump/tests.rs b/runtime/parachains/src/ump/tests.rs
index b4e758b4b88..698b9120617 100644
--- a/runtime/parachains/src/ump/tests.rs
+++ b/runtime/parachains/src/ump/tests.rs
@@ -326,7 +326,7 @@ fn overweight_queue_works() {
 		queue_upward_msg(para_a, a_msg_3.clone());
 		Ump::process_pending_upward_messages();
 		assert_last_event(
-			Event::OverweightEnqueued(para_a, upward_message_id(&a_msg_3[..]), 0, 500).into(),
+			PalletEvent::OverweightEnqueued(para_a, upward_message_id(&a_msg_3[..]), 0, 500).into(),
 		);
 
 		// Now verify that if we wanted to service this overweight message with less than enough
@@ -338,7 +338,7 @@ fn overweight_queue_works() {
 
 		// ... and if we try to service it with just enough weight it will succeed as well.
 		assert_ok!(Ump::service_overweight(Origin::root(), 0, 500));
-		assert_last_event(Event::OverweightServiced(0, 500).into());
+		assert_last_event(PalletEvent::OverweightServiced(0, 500).into());
 
 		// ... and if we try to service a message with index that doesn't exist it will error
 		// out.
diff --git a/runtime/polkadot/src/lib.rs b/runtime/polkadot/src/lib.rs
index 9489df9f403..f9df916f2ac 100644
--- a/runtime/polkadot/src/lib.rs
+++ b/runtime/polkadot/src/lib.rs
@@ -214,7 +214,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = AccountIdLookup<AccountId, ()>;
 	type Header = generic::Header<BlockNumber, BlakeTwo256>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type DbWeight = RocksDbWeight;
 	type Version = Version;
@@ -264,7 +264,7 @@ impl PrivilegeCmp<OriginCaller> for OriginPrivilegeCmp {
 }
 
 impl pallet_scheduler::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type PalletsOrigin = OriginCaller;
 	type Call = Call;
@@ -285,7 +285,7 @@ parameter_types! {
 
 impl pallet_preimage::Config for Runtime {
 	type WeightInfo = pallet_preimage::weights::SubstrateWeight<Runtime>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type ManagerOrigin = EnsureRoot<AccountId>;
 	type MaxSize = PreimageMaxSize;
@@ -341,7 +341,7 @@ impl pallet_indices::Config for Runtime {
 	type AccountIndex = AccountIndex;
 	type Currency = Balances;
 	type Deposit = IndexDeposit;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::pallet_indices::WeightInfo<Runtime>;
 }
 
@@ -354,7 +354,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type Balance = Balance;
 	type DustRemoval = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
 	type MaxLocks = MaxLocks;
@@ -371,7 +371,7 @@ parameter_types! {
 }
 
 impl pallet_transaction_payment::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnChargeTransaction = CurrencyAdapter<Balances, DealWithFees<Runtime>>;
 	type OperationalFeeMultiplier = OperationalFeeMultiplier;
 	type WeightToFee = WeightToFee;
@@ -413,7 +413,7 @@ impl_opaque_keys! {
 }
 
 impl pallet_session::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorId = AccountId;
 	type ValidatorIdOf = pallet_staking::StashOf<Self>;
 	type ShouldEndSession = Babe;
@@ -505,7 +505,7 @@ impl pallet_election_provider_multi_phase::MinerConfig for Runtime {
 }
 
 impl pallet_election_provider_multi_phase::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type EstimateCallFee = TransactionPayment;
 	type SignedPhase = SignedPhase;
@@ -548,7 +548,7 @@ parameter_types! {
 }
 
 impl pallet_bags_list::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ScoreProvider = Staking;
 	type WeightInfo = weights::pallet_bags_list::WeightInfo<Runtime>;
 	type BagThresholds = BagThresholds;
@@ -596,7 +596,7 @@ impl pallet_staking::Config for Runtime {
 	type UnixTime = Timestamp;
 	type CurrencyToVote = CurrencyToVote;
 	type RewardRemainder = Treasury;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Slash = Treasury;
 	type Reward = ();
 	type SessionsPerEra = SessionsPerEra;
@@ -629,7 +629,7 @@ parameter_types! {
 }
 
 impl pallet_identity::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type BasicDeposit = BasicDeposit;
 	type FieldDeposit = FieldDeposit;
@@ -657,7 +657,7 @@ parameter_types! {
 
 impl pallet_democracy::Config for Runtime {
 	type Proposal = Call;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type EnactmentPeriod = EnactmentPeriod;
 	type VoteLockingPeriod = EnactmentPeriod;
@@ -728,7 +728,7 @@ pub type CouncilCollective = pallet_collective::Instance1;
 impl pallet_collective::Config<CouncilCollective> for Runtime {
 	type Origin = Origin;
 	type Proposal = Call;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MotionDuration = CouncilMotionDuration;
 	type MaxProposals = CouncilMaxProposals;
 	type MaxMembers = CouncilMaxMembers;
@@ -755,7 +755,7 @@ parameter_types! {
 const_assert!(DesiredMembers::get() <= CouncilMaxMembers::get());
 
 impl pallet_elections_phragmen::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type PalletId = PhragmenElectionPalletId;
 	type Currency = Balances;
 	type ChangeMembers = Council;
@@ -784,7 +784,7 @@ pub type TechnicalCollective = pallet_collective::Instance2;
 impl pallet_collective::Config<TechnicalCollective> for Runtime {
 	type Origin = Origin;
 	type Proposal = Call;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MotionDuration = TechnicalMotionDuration;
 	type MaxProposals = TechnicalMaxProposals;
 	type MaxMembers = TechnicalMaxMembers;
@@ -793,7 +793,7 @@ impl pallet_collective::Config<TechnicalCollective> for Runtime {
 }
 
 impl pallet_membership::Config<pallet_membership::Instance1> for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type AddOrigin = MoreThanHalfCouncil;
 	type RemoveOrigin = MoreThanHalfCouncil;
 	type SwapOrigin = MoreThanHalfCouncil;
@@ -834,7 +834,7 @@ impl pallet_treasury::Config for Runtime {
 	type Currency = Balances;
 	type ApproveOrigin = ApproveOrigin;
 	type RejectOrigin = MoreThanHalfCouncil;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnSlash = Treasury;
 	type ProposalBond = ProposalBond;
 	type ProposalBondMinimum = ProposalBondMinimum;
@@ -860,7 +860,7 @@ parameter_types! {
 }
 
 impl pallet_bounties::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BountyDepositBase = BountyDepositBase;
 	type BountyDepositPayoutDelay = BountyDepositPayoutDelay;
 	type BountyUpdatePeriod = BountyUpdatePeriod;
@@ -880,14 +880,14 @@ parameter_types! {
 }
 
 impl pallet_child_bounties::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MaxActiveChildBountyCount = MaxActiveChildBountyCount;
 	type ChildBountyValueMinimum = ChildBountyValueMinimum;
 	type WeightInfo = weights::pallet_child_bounties::WeightInfo<Runtime>;
 }
 
 impl pallet_tips::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DataDepositPerByte = DataDepositPerByte;
 	type MaximumReasonLength = MaximumReasonLength;
 	type Tippers = PhragmenElection;
@@ -898,7 +898,7 @@ impl pallet_tips::Config for Runtime {
 }
 
 impl pallet_offences::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type IdentificationTuple = pallet_session::historical::IdentificationTuple<Self>;
 	type OnOffenceHandler = Staking;
 }
@@ -915,7 +915,7 @@ parameter_types! {
 
 impl pallet_im_online::Config for Runtime {
 	type AuthorityId = ImOnlineId;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorSet = Historical;
 	type NextSessionRotation = Babe;
 	type ReportUnresponsiveness = Offences;
@@ -927,7 +927,7 @@ impl pallet_im_online::Config for Runtime {
 }
 
 impl pallet_grandpa::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 
 	type KeyOwnerProof =
@@ -1022,7 +1022,7 @@ parameter_types! {
 }
 
 impl claims::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type VestingSchedule = Vesting;
 	type Prefix = Prefix;
 	/// At least 3/4 of the council must agree to a claim move before it can happen.
@@ -1036,7 +1036,7 @@ parameter_types! {
 }
 
 impl pallet_vesting::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type BlockNumberToBalance = ConvertInto;
 	type MinVestedTransfer = MinVestedTransfer;
@@ -1045,7 +1045,7 @@ impl pallet_vesting::Config for Runtime {
 }
 
 impl pallet_utility::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type PalletsOrigin = OriginCaller;
 	type WeightInfo = weights::pallet_utility::WeightInfo<Runtime>;
@@ -1060,7 +1060,7 @@ parameter_types! {
 }
 
 impl pallet_multisig::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type DepositBase = DepositBase;
@@ -1225,7 +1225,7 @@ impl InstanceFilter<Call> for ProxyType {
 }
 
 impl pallet_proxy::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type ProxyType = ProxyType;
@@ -1252,7 +1252,7 @@ impl parachains_session_info::Config for Runtime {
 }
 
 impl parachains_inclusion::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DisputesHandler = ParasDisputes;
 	type RewardValidators = parachains_reward_points::RewardValidatorsWithEraPoints<Runtime>;
 }
@@ -1262,7 +1262,7 @@ parameter_types! {
 }
 
 impl parachains_paras::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::runtime_parachains_paras::WeightInfo<Runtime>;
 	type UnsignedPriority = ParasUnsignedPriority;
 	type NextSessionRotation = Babe;
@@ -1273,7 +1273,7 @@ parameter_types! {
 }
 
 impl parachains_ump::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink =
 		crate::parachains_ump::XcmSink<xcm_executor::XcmExecutor<xcm_config::XcmConfig>, Runtime>;
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
@@ -1284,7 +1284,7 @@ impl parachains_ump::Config for Runtime {
 impl parachains_dmp::Config for Runtime {}
 
 impl parachains_hrmp::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type WeightInfo = weights::runtime_parachains_hrmp::WeightInfo<Self>;
@@ -1303,7 +1303,7 @@ impl parachains_initializer::Config for Runtime {
 }
 
 impl parachains_disputes::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type RewardValidators = ();
 	type PunishValidators = ();
 	type WeightInfo = weights::runtime_parachains_disputes::WeightInfo<Runtime>;
@@ -1317,7 +1317,7 @@ parameter_types! {
 }
 
 impl paras_registrar::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type OnSwap = (Crowdloan, Slots);
@@ -1338,7 +1338,7 @@ parameter_types! {
 }
 
 impl slots::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type Registrar = Registrar;
 	type LeasePeriod = LeasePeriod;
@@ -1360,7 +1360,7 @@ parameter_types! {
 }
 
 impl crowdloan::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type PalletId = CrowdloanId;
 	type SubmissionDeposit = SubmissionDeposit;
 	type MinContribution = MinContribution;
@@ -1385,7 +1385,7 @@ type AuctionInitiate = EitherOfDiverse<
 >;
 
 impl auctions::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Leaser = Slots;
 	type Registrar = Registrar;
 	type EndingPeriod = EndingPeriod;
@@ -1402,7 +1402,7 @@ parameter_types! {
 }
 
 impl pallet_nomination_pools::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type CurrencyBalance = Balance;
 	type RewardCounter = FixedU128;
@@ -1740,7 +1740,7 @@ sp_api::impl_runtime_apis! {
 		fn candidate_events() -> Vec<CandidateEvent<Hash>> {
 			parachains_runtime_api_impl::candidate_events::<Runtime, _>(|ev| {
 				match ev {
-					Event::ParaInclusion(ev) => {
+					RuntimeEvent::ParaInclusion(ev) => {
 						Some(ev)
 					}
 					_ => None,
@@ -2047,7 +2047,7 @@ sp_api::impl_runtime_apis! {
 				hex_literal::hex!("c2261276cc9d1f8598ea4b6a74b15c2f57c875e4cff74148e4628f264b974c80").to_vec().into(),
 				// Execution Phase
 				hex_literal::hex!("26aa394eea5630e07c48ae0c9558cef7ff553b5a9862a516939d82b3d3d8661a").to_vec().into(),
-				// Event Count
+				// PalletEvent Count
 				hex_literal::hex!("26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850").to_vec().into(),
 				// System Events
 				hex_literal::hex!("26aa394eea5630e07c48ae0c9558cef780d41e5e16056765bc8461851072c9d7").to_vec().into(),
diff --git a/runtime/polkadot/src/xcm_config.rs b/runtime/polkadot/src/xcm_config.rs
index a7ea36445bd..36b6d07b86b 100644
--- a/runtime/polkadot/src/xcm_config.rs
+++ b/runtime/polkadot/src/xcm_config.rs
@@ -17,8 +17,8 @@
 //! XCM configuration for Polkadot.
 
 use super::{
-	parachains_origin, AccountId, Balances, Call, CouncilCollective, Event, Origin, ParaId,
-	Runtime, WeightToFee, XcmPallet,
+	parachains_origin, AccountId, Balances, Call, CouncilCollective, Origin, ParaId, Runtime,
+	RuntimeEvent, WeightToFee, XcmPallet,
 };
 use frame_support::{
 	match_types, parameter_types,
@@ -175,7 +175,7 @@ pub type LocalOriginToLocation = (
 );
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	// Only allow the council to send messages.
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, CouncilToPlurality>;
 	type XcmRouter = XcmRouter;
diff --git a/runtime/rococo/src/lib.rs b/runtime/rococo/src/lib.rs
index d745e109be4..7bbd30fa913 100644
--- a/runtime/rococo/src/lib.rs
+++ b/runtime/rococo/src/lib.rs
@@ -267,7 +267,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = AccountIdLookup<AccountId, ()>;
 	type Header = generic::Header<BlockNumber, BlakeTwo256>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type Version = Version;
 	type PalletInfo = PalletInfo;
@@ -353,7 +353,7 @@ impl pallet_session::historical::Config for Runtime {
 }
 
 impl parachains_disputes::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type RewardValidators = ();
 	type PunishValidators = ();
 	type WeightInfo = weights::runtime_parachains_disputes::WeightInfo<Runtime>;
@@ -372,7 +372,7 @@ parameter_types! {
 
 impl pallet_im_online::Config for Runtime {
 	type AuthorityId = ImOnlineId;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorSet = Historical;
 	type NextSessionRotation = Babe;
 	type ReportUnresponsiveness = Offences;
@@ -392,7 +392,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type Balance = Balance;
 	type DustRemoval = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
 	type MaxLocks = MaxLocks;
@@ -415,7 +415,7 @@ parameter_types! {
 }
 
 impl pallet_offences::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type IdentificationTuple = pallet_session::historical::IdentificationTuple<Self>;
 	type OnOffenceHandler = ();
 }
@@ -442,7 +442,7 @@ parameter_types! {
 }
 
 impl pallet_transaction_payment::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnChargeTransaction = CurrencyAdapter<Balances, ToAuthor<Runtime>>;
 	type OperationalFeeMultiplier = OperationalFeeMultiplier;
 	type WeightToFee = WeightToFee;
@@ -459,7 +459,7 @@ impl sp_runtime::traits::Convert<AccountId, Option<AccountId>> for ValidatorIdOf
 }
 
 impl pallet_session::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorId = AccountId;
 	type ValidatorIdOf = ValidatorIdOf;
 	type ShouldEndSession = Babe;
@@ -512,7 +512,7 @@ impl pallet_indices::Config for Runtime {
 	type AccountIndex = AccountIndex;
 	type Currency = Balances;
 	type Deposit = IndexDeposit;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::pallet_indices::WeightInfo<Runtime>;
 }
 
@@ -521,7 +521,7 @@ parameter_types! {
 }
 
 impl pallet_grandpa::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 
 	type KeyOwnerProofSystem = Historical;
@@ -571,7 +571,7 @@ impl runtime_parachains::inclusion::RewardValidators for RewardValidators {
 }
 
 impl parachains_inclusion::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DisputesHandler = ParasDisputes;
 	type RewardValidators = RewardValidators;
 }
@@ -581,7 +581,7 @@ parameter_types! {
 }
 
 impl parachains_paras::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::runtime_parachains_paras::WeightInfo<Runtime>;
 	type UnsignedPriority = ParasUnsignedPriority;
 	type NextSessionRotation = Babe;
@@ -596,7 +596,7 @@ parameter_types! {
 }
 
 impl parachains_ump::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink =
 		crate::parachains_ump::XcmSink<xcm_executor::XcmExecutor<xcm_config::XcmConfig>, Runtime>;
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
@@ -607,7 +607,7 @@ impl parachains_ump::Config for Runtime {
 impl parachains_dmp::Config for Runtime {}
 
 impl parachains_hrmp::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type WeightInfo = weights::runtime_parachains_hrmp::WeightInfo<Runtime>;
@@ -636,7 +636,7 @@ parameter_types! {
 }
 
 impl assigned_slots::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type AssignSlotOrigin = EnsureRoot<AccountId>;
 	type Leaser = Slots;
 	type PermanentSlotLeasePeriodLength = PermanentSlotLeasePeriodLength;
@@ -652,7 +652,7 @@ parameter_types! {
 }
 
 impl paras_registrar::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type OnSwap = (Crowdloan, Slots);
@@ -723,7 +723,7 @@ parameter_types! {
 }
 
 impl auctions::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Leaser = Slots;
 	type Registrar = Registrar;
 	type EndingPeriod = EndingPeriod;
@@ -738,7 +738,7 @@ parameter_types! {
 }
 
 impl slots::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type Registrar = Registrar;
 	type LeasePeriod = LeasePeriod;
@@ -757,7 +757,7 @@ parameter_types! {
 }
 
 impl crowdloan::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type PalletId = CrowdloanId;
 	type SubmissionDeposit = SubmissionDeposit;
 	type MinContribution = MinContribution;
@@ -769,17 +769,17 @@ impl crowdloan::Config for Runtime {
 }
 
 impl pallet_sudo::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 }
 
 impl validator_manager::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type PrivilegedOrigin = EnsureRoot<AccountId>;
 }
 
 impl pallet_utility::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type PalletsOrigin = OriginCaller;
 	type WeightInfo = weights::pallet_utility::WeightInfo<Runtime>;
@@ -845,7 +845,7 @@ impl InstanceFilter<Call> for ProxyType {
 }
 
 impl pallet_proxy::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type ProxyType = ProxyType;
@@ -868,7 +868,7 @@ parameter_types! {
 impl pallet_collective::Config for Runtime {
 	type Origin = Origin;
 	type Proposal = Call;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type MotionDuration = MotionDuration;
 	type MaxProposals = MaxProposals;
 	type DefaultVote = pallet_collective::PrimeDefaultVote;
@@ -877,7 +877,7 @@ impl pallet_collective::Config for Runtime {
 }
 
 impl pallet_membership::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type AddOrigin = EnsureRoot<AccountId>;
 	type RemoveOrigin = EnsureRoot<AccountId>;
 	type SwapOrigin = EnsureRoot<AccountId>;
@@ -898,7 +898,7 @@ parameter_types! {
 }
 
 impl pallet_multisig::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type DepositBase = DepositBase;
@@ -1055,7 +1055,7 @@ sp_api::impl_runtime_apis! {
 		fn candidate_events() -> Vec<CandidateEvent<Hash>> {
 			runtime_api_impl::candidate_events::<Runtime, _>(|ev| {
 				match ev {
-					Event::ParaInclusion(ev) => {
+					RuntimeEvent::ParaInclusion(ev) => {
 						Some(ev)
 					}
 					_ => None,
@@ -1359,7 +1359,7 @@ sp_api::impl_runtime_apis! {
 				hex_literal::hex!("c2261276cc9d1f8598ea4b6a74b15c2f57c875e4cff74148e4628f264b974c80").to_vec().into(),
 				// Execution Phase
 				hex_literal::hex!("26aa394eea5630e07c48ae0c9558cef7ff553b5a9862a516939d82b3d3d8661a").to_vec().into(),
-				// Event Count
+				// PalletEvent Count
 				hex_literal::hex!("26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850").to_vec().into(),
 				// System Events
 				hex_literal::hex!("26aa394eea5630e07c48ae0c9558cef780d41e5e16056765bc8461851072c9d7").to_vec().into(),
diff --git a/runtime/rococo/src/validator_manager.rs b/runtime/rococo/src/validator_manager.rs
index 2fd60b682ea..d0522522fb6 100644
--- a/runtime/rococo/src/validator_manager.rs
+++ b/runtime/rococo/src/validator_manager.rs
@@ -37,7 +37,8 @@ pub mod pallet {
 	#[pallet::config]
 	pub trait Config: frame_system::Config + pallet_session::Config {
 		/// The overreaching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// Privileged origin that can add or remove validators.
 		type PrivilegedOrigin: EnsureOrigin<<Self as frame_system::Config>::Origin>;
@@ -45,7 +46,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// New validators were added to the set.
 		ValidatorsRegistered(Vec<T::ValidatorId>),
 		/// Validators were removed from the set.
@@ -75,7 +76,7 @@ pub mod pallet {
 
 			validators.clone().into_iter().for_each(|v| ValidatorsToAdd::<T>::append(v));
 
-			Self::deposit_event(Event::ValidatorsRegistered(validators));
+			Self::deposit_event(PalletEvent::ValidatorsRegistered(validators));
 			Ok(())
 		}
 
@@ -91,7 +92,7 @@ pub mod pallet {
 
 			validators.clone().into_iter().for_each(|v| ValidatorsToRetire::<T>::append(v));
 
-			Self::deposit_event(Event::ValidatorsDeregistered(validators));
+			Self::deposit_event(PalletEvent::ValidatorsDeregistered(validators));
 			Ok(())
 		}
 	}
diff --git a/runtime/rococo/src/xcm_config.rs b/runtime/rococo/src/xcm_config.rs
index 1512ef9e6cc..4a111d9a40a 100644
--- a/runtime/rococo/src/xcm_config.rs
+++ b/runtime/rococo/src/xcm_config.rs
@@ -17,8 +17,8 @@
 //! XCM configuration for Rococo.
 
 use super::{
-	parachains_origin, AccountId, Balances, Call, Event, Origin, ParaId, Runtime, WeightToFee,
-	XcmPallet,
+	parachains_origin, AccountId, Balances, Call, Origin, ParaId, Runtime, RuntimeEvent,
+	WeightToFee, XcmPallet,
 };
 use frame_support::{
 	parameter_types,
@@ -151,7 +151,7 @@ pub type LocalOriginToLocation = (
 );
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = XcmRouter;
 	// Anyone can execute XCM messages locally...
diff --git a/runtime/test-runtime/src/lib.rs b/runtime/test-runtime/src/lib.rs
index d18a2c9bb95..a703b68cf9c 100644
--- a/runtime/test-runtime/src/lib.rs
+++ b/runtime/test-runtime/src/lib.rs
@@ -145,7 +145,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = Indices;
 	type Header = generic::Header<BlockNumber, BlakeTwo256>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type Version = Version;
 	type PalletInfo = PalletInfo;
@@ -206,7 +206,7 @@ impl pallet_indices::Config for Runtime {
 	type AccountIndex = AccountIndex;
 	type Currency = Balances;
 	type Deposit = IndexDeposit;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = ();
 }
 
@@ -219,7 +219,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type Balance = Balance;
 	type DustRemoval = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
 	type MaxLocks = MaxLocks;
@@ -236,7 +236,7 @@ parameter_types! {
 }
 
 impl pallet_transaction_payment::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnChargeTransaction = CurrencyAdapter<Balances, ()>;
 	type OperationalFeeMultiplier = OperationalFeeMultiplier;
 	type WeightToFee = WeightToFee;
@@ -282,7 +282,7 @@ impl_opaque_keys! {
 }
 
 impl pallet_session::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorId = AccountId;
 	type ValidatorIdOf = pallet_staking::StashOf<Self>;
 	type ShouldEndSession = Babe;
@@ -337,7 +337,7 @@ impl pallet_staking::Config for Runtime {
 	type UnixTime = Timestamp;
 	type CurrencyToVote = frame_support::traits::U128CurrencyToVote;
 	type RewardRemainder = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Slash = ();
 	type Reward = ();
 	type SessionsPerEra = SessionsPerEra;
@@ -362,7 +362,7 @@ impl pallet_staking::Config for Runtime {
 }
 
 impl pallet_grandpa::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 
 	type KeyOwnerProofSystem = ();
@@ -427,7 +427,7 @@ impl frame_system::offchain::SigningTypes for Runtime {
 }
 
 impl pallet_offences::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type IdentificationTuple = pallet_session::historical::IdentificationTuple<Self>;
 	type OnOffenceHandler = Staking;
 }
@@ -446,7 +446,7 @@ parameter_types! {
 }
 
 impl claims::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type VestingSchedule = Vesting;
 	type Prefix = Prefix;
 	type MoveClaimOrigin = frame_system::EnsureRoot<AccountId>;
@@ -458,7 +458,7 @@ parameter_types! {
 }
 
 impl pallet_vesting::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type BlockNumberToBalance = ConvertInto;
 	type MinVestedTransfer = MinVestedTransfer;
@@ -467,7 +467,7 @@ impl pallet_vesting::Config for Runtime {
 }
 
 impl pallet_sudo::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 }
 
@@ -478,13 +478,13 @@ impl parachains_configuration::Config for Runtime {
 impl parachains_shared::Config for Runtime {}
 
 impl parachains_inclusion::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DisputesHandler = ParasDisputes;
 	type RewardValidators = RewardValidatorsWithEraPoints<Runtime>;
 }
 
 impl parachains_disputes::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type RewardValidators = ();
 	type PunishValidators = ();
 	type WeightInfo = parachains_disputes::TestWeightInfo;
@@ -509,7 +509,7 @@ parameter_types! {
 }
 
 impl parachains_paras::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = parachains_paras::TestWeightInfo;
 	type UnsignedPriority = ParasUnsignedPriority;
 	type NextSessionRotation = Babe;
@@ -522,7 +522,7 @@ parameter_types! {
 }
 
 impl parachains_ump::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink = ();
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
 	type ExecuteOverweightOrigin = frame_system::EnsureRoot<AccountId>;
@@ -540,7 +540,7 @@ pub type LocalOriginToLocation = xcm_builder::SignedToAccountId32<Origin, Accoun
 impl pallet_xcm::Config for Runtime {
 	// The config types here are entirely configurable, since the only one that is sorely needed
 	// is `XcmExecutor`, which will be used in unit tests located in xcm-executor.
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ExecuteXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type LocationInverter = xcm_config::InvertNothing;
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
@@ -557,7 +557,7 @@ impl pallet_xcm::Config for Runtime {
 }
 
 impl parachains_hrmp::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type WeightInfo = parachains_hrmp::TestWeightInfo;
@@ -570,7 +570,7 @@ impl paras_sudo_wrapper::Config for Runtime {}
 impl parachains_origin::Config for Runtime {}
 
 impl pallet_test_notifier::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Call = Call;
 }
@@ -589,7 +589,8 @@ pub mod pallet_test_notifier {
 
 	#[pallet::config]
 	pub trait Config: frame_system::Config + pallet_xcm::Config {
-		type Event: IsType<<Self as frame_system::Config>::Event> + From<Event<Self>>;
+		type RuntimeEvent: IsType<<Self as frame_system::Config>::RuntimeEvent>
+			+ From<PalletEvent<Self>>;
 		type Origin: IsType<<Self as frame_system::Config>::Origin>
 			+ Into<Result<pallet_xcm::Origin, <Self as Config>::Origin>>;
 		type Call: IsType<<Self as pallet_xcm::Config>::Call> + From<Call<Self>>;
@@ -597,7 +598,7 @@ pub mod pallet_test_notifier {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		QueryPrepared(QueryId),
 		NotifyQueryPrepared(QueryId),
 		ResponseReceived(MultiLocation, QueryId, Response),
@@ -621,7 +622,7 @@ pub mod pallet_test_notifier {
 				Junction::AccountId32 { network: Any, id }.into(),
 				100u32.into(),
 			);
-			Self::deposit_event(Event::<T>::QueryPrepared(qid));
+			Self::deposit_event(PalletEvent::<T>::QueryPrepared(qid));
 			Ok(())
 		}
 
@@ -638,7 +639,7 @@ pub mod pallet_test_notifier {
 				<T as Config>::Call::from(call),
 				100u32.into(),
 			);
-			Self::deposit_event(Event::<T>::NotifyQueryPrepared(qid));
+			Self::deposit_event(PalletEvent::<T>::NotifyQueryPrepared(qid));
 			Ok(())
 		}
 
@@ -649,7 +650,7 @@ pub mod pallet_test_notifier {
 			response: Response,
 		) -> DispatchResult {
 			let responder = ensure_response(<T as Config>::Origin::from(origin))?;
-			Self::deposit_event(Event::<T>::ResponseReceived(responder, query_id, response));
+			Self::deposit_event(PalletEvent::<T>::ResponseReceived(responder, query_id, response));
 			Ok(())
 		}
 	}
diff --git a/runtime/westend/src/lib.rs b/runtime/westend/src/lib.rs
index 788aede7809..bec0be82d1f 100644
--- a/runtime/westend/src/lib.rs
+++ b/runtime/westend/src/lib.rs
@@ -155,7 +155,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = AccountIdLookup<AccountId, ()>;
 	type Header = generic::Header<BlockNumber, BlakeTwo256>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type DbWeight = RocksDbWeight;
 	type Version = Version;
@@ -177,7 +177,7 @@ parameter_types! {
 }
 
 impl pallet_scheduler::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type PalletsOrigin = OriginCaller;
 	type Call = Call;
@@ -198,7 +198,7 @@ parameter_types! {
 
 impl pallet_preimage::Config for Runtime {
 	type WeightInfo = weights::pallet_preimage::WeightInfo<Runtime>;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type ManagerOrigin = EnsureRoot<AccountId>;
 	type MaxSize = PreimageMaxSize;
@@ -253,7 +253,7 @@ impl pallet_indices::Config for Runtime {
 	type AccountIndex = AccountIndex;
 	type Currency = Balances;
 	type Deposit = IndexDeposit;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::pallet_indices::WeightInfo<Runtime>;
 }
 
@@ -266,7 +266,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type Balance = Balance;
 	type DustRemoval = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
 	type MaxLocks = MaxLocks;
@@ -283,7 +283,7 @@ parameter_types! {
 }
 
 impl pallet_transaction_payment::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type OnChargeTransaction = CurrencyAdapter<Balances, ToAuthor<Runtime>>;
 	type OperationalFeeMultiplier = OperationalFeeMultiplier;
 	type WeightToFee = WeightToFee;
@@ -329,7 +329,7 @@ impl_opaque_keys! {
 }
 
 impl pallet_session::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorId = AccountId;
 	type ValidatorIdOf = pallet_staking::StashOf<Self>;
 	type ShouldEndSession = Babe;
@@ -416,7 +416,7 @@ impl pallet_election_provider_multi_phase::MinerConfig for Runtime {
 }
 
 impl pallet_election_provider_multi_phase::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type EstimateCallFee = TransactionPayment;
 	type SignedPhase = SignedPhase;
@@ -456,7 +456,7 @@ parameter_types! {
 }
 
 impl pallet_bags_list::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ScoreProvider = Staking;
 	type WeightInfo = weights::pallet_bags_list::WeightInfo<Runtime>;
 	type BagThresholds = BagThresholds;
@@ -494,7 +494,7 @@ impl pallet_staking::Config for Runtime {
 	type UnixTime = Timestamp;
 	type CurrencyToVote = CurrencyToVote;
 	type RewardRemainder = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Slash = ();
 	type Reward = ();
 	type SessionsPerEra = SessionsPerEra;
@@ -521,7 +521,7 @@ parameter_types! {
 }
 
 impl pallet_offences::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type IdentificationTuple = pallet_session::historical::IdentificationTuple<Self>;
 	type OnOffenceHandler = Staking;
 }
@@ -540,7 +540,7 @@ parameter_types! {
 
 impl pallet_im_online::Config for Runtime {
 	type AuthorityId = ImOnlineId;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ValidatorSet = Historical;
 	type NextSessionRotation = Babe;
 	type ReportUnresponsiveness = Offences;
@@ -552,7 +552,7 @@ impl pallet_im_online::Config for Runtime {
 }
 
 impl pallet_grandpa::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 
 	type KeyOwnerProofSystem = Historical;
@@ -647,7 +647,7 @@ parameter_types! {
 }
 
 impl pallet_identity::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type Slashed = ();
 	type BasicDeposit = BasicDeposit;
@@ -662,7 +662,7 @@ impl pallet_identity::Config for Runtime {
 }
 
 impl pallet_utility::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type PalletsOrigin = OriginCaller;
 	type WeightInfo = weights::pallet_utility::WeightInfo<Runtime>;
@@ -677,7 +677,7 @@ parameter_types! {
 }
 
 impl pallet_multisig::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type DepositBase = DepositBase;
@@ -694,7 +694,7 @@ parameter_types! {
 }
 
 impl pallet_recovery::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = ();
 	type Call = Call;
 	type Currency = Balances;
@@ -709,7 +709,7 @@ parameter_types! {
 }
 
 impl pallet_vesting::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type BlockNumberToBalance = ConvertInto;
 	type MinVestedTransfer = MinVestedTransfer;
@@ -718,7 +718,7 @@ impl pallet_vesting::Config for Runtime {
 }
 
 impl pallet_sudo::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 }
 
@@ -841,7 +841,7 @@ impl InstanceFilter<Call> for ProxyType {
 }
 
 impl pallet_proxy::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Call = Call;
 	type Currency = Balances;
 	type ProxyType = ProxyType;
@@ -868,7 +868,7 @@ impl parachains_session_info::Config for Runtime {
 }
 
 impl parachains_inclusion::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DisputesHandler = ParasDisputes;
 	type RewardValidators = parachains_reward_points::RewardValidatorsWithEraPoints<Runtime>;
 }
@@ -878,7 +878,7 @@ parameter_types! {
 }
 
 impl parachains_paras::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::runtime_parachains_paras::WeightInfo<Runtime>;
 	type UnsignedPriority = ParasUnsignedPriority;
 	type NextSessionRotation = Babe;
@@ -889,7 +889,7 @@ parameter_types! {
 }
 
 impl parachains_ump::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink =
 		crate::parachains_ump::XcmSink<xcm_executor::XcmExecutor<xcm_config::XcmConfig>, Runtime>;
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
@@ -900,7 +900,7 @@ impl parachains_ump::Config for Runtime {
 impl parachains_dmp::Config for Runtime {}
 
 impl parachains_hrmp::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type WeightInfo = weights::runtime_parachains_hrmp::WeightInfo<Self>;
@@ -929,7 +929,7 @@ parameter_types! {
 }
 
 impl assigned_slots::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type AssignSlotOrigin = EnsureRoot<AccountId>;
 	type Leaser = Slots;
 	type PermanentSlotLeasePeriodLength = PermanentSlotLeasePeriodLength;
@@ -940,7 +940,7 @@ impl assigned_slots::Config for Runtime {
 }
 
 impl parachains_disputes::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type RewardValidators = ();
 	type PunishValidators = ();
 	type WeightInfo = weights::runtime_parachains_disputes::WeightInfo<Runtime>;
@@ -952,7 +952,7 @@ parameter_types! {
 }
 
 impl paras_registrar::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Currency = Balances;
 	type OnSwap = (Crowdloan, Slots);
@@ -966,7 +966,7 @@ parameter_types! {
 }
 
 impl slots::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Currency = Balances;
 	type Registrar = Registrar;
 	type LeasePeriod = LeasePeriod;
@@ -985,7 +985,7 @@ parameter_types! {
 }
 
 impl crowdloan::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type PalletId = CrowdloanId;
 	type SubmissionDeposit = SubmissionDeposit;
 	type MinContribution = MinContribution;
@@ -1005,7 +1005,7 @@ parameter_types! {
 }
 
 impl auctions::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Leaser = Slots;
 	type Registrar = Registrar;
 	type EndingPeriod = EndingPeriod;
@@ -1021,7 +1021,7 @@ parameter_types! {
 }
 
 impl pallet_nomination_pools::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type WeightInfo = weights::pallet_nomination_pools::WeightInfo<Self>;
 	type Currency = Balances;
 	type CurrencyBalance = Balance;
@@ -1324,7 +1324,7 @@ sp_api::impl_runtime_apis! {
 		fn candidate_events() -> Vec<CandidateEvent<Hash>> {
 			parachains_runtime_api_impl::candidate_events::<Runtime, _>(|ev| {
 				match ev {
-					Event::ParaInclusion(ev) => {
+					RuntimeEvent::ParaInclusion(ev) => {
 						Some(ev)
 					}
 					_ => None,
diff --git a/runtime/westend/src/xcm_config.rs b/runtime/westend/src/xcm_config.rs
index 867bdb2cacf..c282dc2dcca 100644
--- a/runtime/westend/src/xcm_config.rs
+++ b/runtime/westend/src/xcm_config.rs
@@ -17,7 +17,7 @@
 //! XCM configurations for Westend.
 
 use super::{
-	parachains_origin, weights, AccountId, Balances, Call, Event, Origin, ParaId, Runtime,
+	parachains_origin, weights, AccountId, Balances, Call, Origin, ParaId, Runtime, RuntimeEvent,
 	WeightToFee, XcmPallet,
 };
 use frame_support::{
@@ -131,7 +131,7 @@ pub type LocalOriginToLocation = (
 );
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = XcmRouter;
 	// Anyone can execute XCM messages locally...
diff --git a/scripts/ci/run_benches_for_runtime.sh b/scripts/ci/run_benches_for_runtime.sh
index 8149195c82c..cd9cb5be8e9 100755
--- a/scripts/ci/run_benches_for_runtime.sh
+++ b/scripts/ci/run_benches_for_runtime.sh
@@ -29,6 +29,12 @@ rm -f $ERR_FILE
 for PALLET in "${PALLETS[@]}"; do
   echo "[+] Benchmarking $PALLET for $runtime";
 
+  output_file=""
+  if [[ $PALLET == *"::"* ]]; then
+    # translates e.g. "pallet_foo::bar" to "pallet_foo_bar"
+    output_file="${PALLET//::/_}.rs"
+  fi
+
   OUTPUT=$(
     ./target/production/polkadot benchmark pallet \
     --chain="${runtime}-dev" \
@@ -39,7 +45,7 @@ for PALLET in "${PALLETS[@]}"; do
     --execution=wasm \
     --wasm-execution=compiled \
     --header=./file_header.txt \
-    --output="./runtime/${runtime}/src/weights/${PALLET/::/_}.rs" 2>&1
+    --output="./runtime/${runtime}/src/weights/${output_file}" 2>&1
   )
   if [ $? -ne 0 ]; then
     echo "$OUTPUT" >> "$ERR_FILE"
diff --git a/xcm/pallet-xcm-benchmarks/src/fungible/mock.rs b/xcm/pallet-xcm-benchmarks/src/fungible/mock.rs
index 3f7e4f8f26e..3f5b4d9e662 100644
--- a/xcm/pallet-xcm-benchmarks/src/fungible/mock.rs
+++ b/xcm/pallet-xcm-benchmarks/src/fungible/mock.rs
@@ -63,7 +63,7 @@ impl frame_system::Config for Test {
 	type AccountId = u64;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type Version = ();
 	type PalletInfo = PalletInfo;
@@ -86,7 +86,7 @@ impl pallet_balances::Config for Test {
 	type ReserveIdentifier = [u8; 8];
 	type Balance = u64;
 	type DustRemoval = ();
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
 	type WeightInfo = ();
diff --git a/xcm/pallet-xcm-benchmarks/src/generic/mock.rs b/xcm/pallet-xcm-benchmarks/src/generic/mock.rs
index 7782ba1d90e..7fec7a5e041 100644
--- a/xcm/pallet-xcm-benchmarks/src/generic/mock.rs
+++ b/xcm/pallet-xcm-benchmarks/src/generic/mock.rs
@@ -68,7 +68,7 @@ impl frame_system::Config for Test {
 	type AccountId = u64;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type Version = ();
 	type PalletInfo = PalletInfo;
diff --git a/xcm/pallet-xcm/src/lib.rs b/xcm/pallet-xcm/src/lib.rs
index c237fc702a4..b286b41b384 100644
--- a/xcm/pallet-xcm/src/lib.rs
+++ b/xcm/pallet-xcm/src/lib.rs
@@ -71,7 +71,8 @@ pub mod pallet {
 	/// The module configuration trait.
 	pub trait Config: frame_system::Config {
 		/// The overarching event type.
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// Required origin for sending XCM messages. If successful, it resolves to `MultiLocation`
 		/// which exists as an interior location within this chain's XCM context.
@@ -124,7 +125,7 @@ pub mod pallet {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		/// Execution of an XCM message was attempted.
 		///
 		/// \[ outcome \]
@@ -461,7 +462,7 @@ pub mod pallet {
 				SendError::CannotReachDestination(..) => Error::<T>::Unreachable,
 				_ => Error::<T>::SendFailure,
 			})?;
-			Self::deposit_event(Event::Sent(origin_location, dest, message));
+			Self::deposit_event(PalletEvent::Sent(origin_location, dest, message));
 			Ok(())
 		}
 
@@ -579,7 +580,7 @@ pub mod pallet {
 				max_weight,
 			);
 			let result = Ok(Some(outcome.weight_used().saturating_add(100_000_000)).into());
-			Self::deposit_event(Event::Attempted(outcome));
+			Self::deposit_event(PalletEvent::Attempted(outcome));
 			result
 		}
 
@@ -602,7 +603,7 @@ pub mod pallet {
 				LatestVersionedMultiLocation(&location),
 				xcm_version,
 			);
-			Self::deposit_event(Event::SupportedVersionChanged(location, xcm_version));
+			Self::deposit_event(PalletEvent::SupportedVersionChanged(location, xcm_version));
 			Ok(())
 		}
 
@@ -818,7 +819,7 @@ pub mod pallet {
 				T::Weigher::weight(&mut message).map_err(|()| Error::<T>::UnweighableMessage)?;
 			let outcome =
 				T::XcmExecutor::execute_xcm_in_credit(origin_location, message, weight, weight);
-			Self::deposit_event(Event::Attempted(outcome));
+			Self::deposit_event(PalletEvent::Attempted(outcome));
 			Ok(())
 		}
 
@@ -876,7 +877,7 @@ pub mod pallet {
 				T::Weigher::weight(&mut message).map_err(|()| Error::<T>::UnweighableMessage)?;
 			let outcome =
 				T::XcmExecutor::execute_xcm_in_credit(origin_location, message, weight, weight);
-			Self::deposit_event(Event::Attempted(outcome));
+			Self::deposit_event(PalletEvent::Attempted(outcome));
 			Ok(())
 		}
 
@@ -954,11 +955,11 @@ pub mod pallet {
 						Ok(()) => {
 							let value = (query_id, max_weight, xcm_version);
 							VersionNotifyTargets::<T>::insert(XCM_VERSION, key, value);
-							Event::VersionChangeNotified(new_key, xcm_version)
+							PalletEvent::VersionChangeNotified(new_key, xcm_version)
 						},
 						Err(e) => {
 							VersionNotifyTargets::<T>::remove(XCM_VERSION, key);
-							Event::NotifyTargetSendFail(new_key, query_id, e.into())
+							PalletEvent::NotifyTargetSendFail(new_key, query_id, e.into())
 						},
 					};
 					Self::deposit_event(event);
@@ -977,7 +978,7 @@ pub mod pallet {
 						let new_key = match MultiLocation::try_from(old_key.clone()) {
 							Ok(k) => k,
 							Err(()) => {
-								Self::deposit_event(Event::NotifyTargetMigrationFail(
+								Self::deposit_event(PalletEvent::NotifyTargetMigrationFail(
 									old_key, value.0,
 								));
 								weight_used.saturating_accrue(todo_vnt_migrate_fail_weight);
@@ -1004,9 +1005,10 @@ pub mod pallet {
 										versioned_key,
 										(query_id, max_weight, xcm_version),
 									);
-									Event::VersionChangeNotified(new_key, xcm_version)
+									PalletEvent::VersionChangeNotified(new_key, xcm_version)
 								},
-								Err(e) => Event::NotifyTargetSendFail(new_key, query_id, e.into()),
+								Err(e) =>
+									PalletEvent::NotifyTargetSendFail(new_key, query_id, e.into()),
 							};
 							Self::deposit_event(event);
 							weight_used.saturating_accrue(todo_vnt_notify_migrate_weight);
@@ -1182,7 +1184,7 @@ pub mod pallet {
 			if let Some(QueryStatus::Ready { response, at }) = Queries::<T>::get(query_id) {
 				let response = response.try_into().ok()?;
 				Queries::<T>::remove(query_id);
-				Self::deposit_event(Event::ResponseTaken(query_id));
+				Self::deposit_event(PalletEvent::ResponseTaken(query_id));
 				Some((response, at))
 			} else {
 				None
@@ -1277,7 +1279,7 @@ pub mod pallet {
 			let versioned = VersionedMultiAssets::from(MultiAssets::from(assets));
 			let hash = BlakeTwo256::hash_of(&(&origin, &versioned));
 			AssetTraps::<T>::mutate(hash, |n| *n += 1);
-			Self::deposit_event(Event::AssetsTrapped(hash, origin.clone(), versioned));
+			Self::deposit_event(PalletEvent::AssetsTrapped(hash, origin.clone(), versioned));
 			// TODO #3735: Put the real weight in there.
 			0
 		}
@@ -1334,7 +1336,7 @@ pub mod pallet {
 					let origin: MultiLocation = match expected_origin.try_into() {
 						Ok(o) if &o == origin => o,
 						Ok(o) => {
-							Self::deposit_event(Event::InvalidResponder(
+							Self::deposit_event(PalletEvent::InvalidResponder(
 								origin.clone(),
 								query_id,
 								Some(o),
@@ -1342,7 +1344,7 @@ pub mod pallet {
 							return 0
 						},
 						_ => {
-							Self::deposit_event(Event::InvalidResponder(
+							Self::deposit_event(PalletEvent::InvalidResponder(
 								origin.clone(),
 								query_id,
 								None,
@@ -1367,14 +1369,14 @@ pub mod pallet {
 						LatestVersionedMultiLocation(&origin),
 						v,
 					);
-					Self::deposit_event(Event::SupportedVersionChanged(origin, v));
+					Self::deposit_event(PalletEvent::SupportedVersionChanged(origin, v));
 					0
 				},
 				(response, Some(QueryStatus::Pending { responder, maybe_notify, .. })) => {
 					let responder = match MultiLocation::try_from(responder) {
 						Ok(r) => r,
 						Err(_) => {
-							Self::deposit_event(Event::InvalidResponderVersion(
+							Self::deposit_event(PalletEvent::InvalidResponderVersion(
 								origin.clone(),
 								query_id,
 							));
@@ -1382,7 +1384,7 @@ pub mod pallet {
 						},
 					};
 					if origin != &responder {
-						Self::deposit_event(Event::InvalidResponder(
+						Self::deposit_event(PalletEvent::InvalidResponder(
 							origin.clone(),
 							query_id,
 							Some(responder),
@@ -1401,7 +1403,7 @@ pub mod pallet {
 								Queries::<T>::remove(query_id);
 								let weight = call.get_dispatch_info().weight;
 								if weight > max_weight {
-									let e = Event::NotifyOverweight(
+									let e = PalletEvent::NotifyOverweight(
 										query_id,
 										pallet_index,
 										call_index,
@@ -1414,12 +1416,16 @@ pub mod pallet {
 								let dispatch_origin = Origin::Response(origin.clone()).into();
 								match call.dispatch(dispatch_origin) {
 									Ok(post_info) => {
-										let e = Event::Notified(query_id, pallet_index, call_index);
+										let e = PalletEvent::Notified(
+											query_id,
+											pallet_index,
+											call_index,
+										);
 										Self::deposit_event(e);
 										post_info.actual_weight
 									},
 									Err(error_and_info) => {
-										let e = Event::NotifyDispatchError(
+										let e = PalletEvent::NotifyDispatchError(
 											query_id,
 											pallet_index,
 											call_index,
@@ -1432,14 +1438,17 @@ pub mod pallet {
 								}
 								.unwrap_or(weight)
 							} else {
-								let e =
-									Event::NotifyDecodeFailed(query_id, pallet_index, call_index);
+								let e = PalletEvent::NotifyDecodeFailed(
+									query_id,
+									pallet_index,
+									call_index,
+								);
 								Self::deposit_event(e);
 								0
 							}
 						},
 						None => {
-							let e = Event::ResponseReady(query_id, response.clone());
+							let e = PalletEvent::ResponseReady(query_id, response.clone());
 							Self::deposit_event(e);
 							let at = frame_system::Pallet::<T>::current_block_number();
 							let response = response.into();
@@ -1449,7 +1458,7 @@ pub mod pallet {
 					}
 				},
 				_ => {
-					Self::deposit_event(Event::UnexpectedResponse(origin.clone(), query_id));
+					Self::deposit_event(PalletEvent::UnexpectedResponse(origin.clone(), query_id));
 					return 0
 				},
 			}
diff --git a/xcm/pallet-xcm/src/mock.rs b/xcm/pallet-xcm/src/mock.rs
index 5627acd31a3..3bd9bf395e3 100644
--- a/xcm/pallet-xcm/src/mock.rs
+++ b/xcm/pallet-xcm/src/mock.rs
@@ -51,7 +51,8 @@ pub mod pallet_test_notifier {
 
 	#[pallet::config]
 	pub trait Config: frame_system::Config + crate::Config {
-		type Event: IsType<<Self as frame_system::Config>::Event> + From<Event<Self>>;
+		type RuntimeEvent: IsType<<Self as frame_system::Config>::RuntimeEvent>
+			+ From<PalletEvent<Self>>;
 		type Origin: IsType<<Self as frame_system::Config>::Origin>
 			+ Into<Result<crate::Origin, <Self as Config>::Origin>>;
 		type Call: IsType<<Self as crate::Config>::Call> + From<Call<Self>>;
@@ -59,7 +60,7 @@ pub mod pallet_test_notifier {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		QueryPrepared(QueryId),
 		NotifyQueryPrepared(QueryId),
 		ResponseReceived(MultiLocation, QueryId, Response),
@@ -83,7 +84,7 @@ pub mod pallet_test_notifier {
 				Junction::AccountId32 { network: Any, id }.into(),
 				100u32.into(),
 			);
-			Self::deposit_event(Event::<T>::QueryPrepared(qid));
+			Self::deposit_event(PalletEvent::<T>::QueryPrepared(qid));
 			Ok(())
 		}
 
@@ -100,7 +101,7 @@ pub mod pallet_test_notifier {
 				<T as Config>::Call::from(call),
 				100u32.into(),
 			);
-			Self::deposit_event(Event::<T>::NotifyQueryPrepared(qid));
+			Self::deposit_event(PalletEvent::<T>::NotifyQueryPrepared(qid));
 			Ok(())
 		}
 
@@ -111,7 +112,7 @@ pub mod pallet_test_notifier {
 			response: Response,
 		) -> DispatchResult {
 			let responder = ensure_response(<T as Config>::Origin::from(origin))?;
-			Self::deposit_event(Event::<T>::ResponseReceived(responder, query_id, response));
+			Self::deposit_event(PalletEvent::<T>::ResponseReceived(responder, query_id, response));
 			Ok(())
 		}
 	}
@@ -180,7 +181,7 @@ impl frame_system::Config for Test {
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type BlockWeights = ();
 	type BlockLength = ();
@@ -206,7 +207,7 @@ parameter_types! {
 impl pallet_balances::Config for Test {
 	type MaxLocks = MaxLocks;
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -274,7 +275,7 @@ parameter_types! {
 }
 
 impl pallet_xcm::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = (TestSendXcmErrX8, TestSendXcm);
 	type ExecuteXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
@@ -293,16 +294,16 @@ impl pallet_xcm::Config for Test {
 impl origin::Config for Test {}
 
 impl pallet_test_notifier::Config for Test {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type Origin = Origin;
 	type Call = Call;
 }
 
-pub(crate) fn last_event() -> Event {
-	System::events().pop().expect("Event expected").event
+pub(crate) fn last_event() -> RuntimeEvent {
+	System::events().pop().expect("RuntimeEvent expected").event
 }
 
-pub(crate) fn last_events(n: usize) -> Vec<Event> {
+pub(crate) fn last_events(n: usize) -> Vec<RuntimeEvent> {
 	System::events().into_iter().map(|e| e.event).rev().take(n).rev().collect()
 }
 
diff --git a/xcm/pallet-xcm/src/tests.rs b/xcm/pallet-xcm/src/tests.rs
index 8ede7f11ae2..7aa2a8f9ed2 100644
--- a/xcm/pallet-xcm/src/tests.rs
+++ b/xcm/pallet-xcm/src/tests.rs
@@ -84,12 +84,12 @@ fn report_outcome_notify_works() {
 		assert_eq!(
 			last_events(2),
 			vec![
-				Event::TestNotifier(pallet_test_notifier::Event::ResponseReceived(
+				RuntimeEvent::TestNotifier(pallet_test_notifier::PalletEvent::ResponseReceived(
 					Parachain(PARA_ID).into(),
 					0,
 					Response::ExecutionResult(None),
 				)),
-				Event::XcmPallet(crate::Event::Notified(0, 4, 2)),
+				RuntimeEvent::XcmPallet(crate::PalletEvent::Notified(0, 4, 2)),
 			]
 		);
 		assert_eq!(crate::Queries::<Test>::iter().collect::<Vec<_>>(), vec![]);
@@ -139,7 +139,10 @@ fn report_outcome_works() {
 		assert_eq!(r, Outcome::Complete(1_000));
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::ResponseReady(0, Response::ExecutionResult(None),))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::ResponseReady(
+				0,
+				Response::ExecutionResult(None),
+			))
 		);
 
 		let response = Some((Response::ExecutionResult(None), 1));
@@ -180,7 +183,7 @@ fn send_works() {
 		);
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Sent(sender, RelayLocation::get(), message))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Sent(sender, RelayLocation::get(), message))
 		);
 	});
 }
@@ -252,7 +255,7 @@ fn teleport_assets_works() {
 		let _check_v0_ok: xcm::v0::Xcm<()> = versioned_sent.try_into().unwrap();
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(weight)))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(weight)))
 		);
 	});
 }
@@ -296,7 +299,7 @@ fn limmited_teleport_assets_works() {
 		let _check_v0_ok: xcm::v0::Xcm<()> = versioned_sent.try_into().unwrap();
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(weight)))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(weight)))
 		);
 	});
 }
@@ -338,7 +341,7 @@ fn unlimmited_teleport_assets_works() {
 		);
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(weight)))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(weight)))
 		);
 	});
 }
@@ -386,7 +389,7 @@ fn reserve_transfer_assets_works() {
 		let _check_v0_ok: xcm::v0::Xcm<()> = versioned_sent.try_into().unwrap();
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(weight)))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(weight)))
 		);
 	});
 }
@@ -435,7 +438,7 @@ fn limited_reserve_transfer_assets_works() {
 		let _check_v0_ok: xcm::v0::Xcm<()> = versioned_sent.try_into().unwrap();
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(weight)))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(weight)))
 		);
 	});
 }
@@ -482,7 +485,7 @@ fn unlimited_reserve_transfer_assets_works() {
 		);
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(weight)))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(weight)))
 		);
 	});
 }
@@ -515,7 +518,7 @@ fn execute_withdraw_to_deposit_works() {
 		assert_eq!(Balances::total_balance(&BOB), SEND_AMOUNT);
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(weight)))
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(weight)))
 		);
 	});
 }
@@ -551,8 +554,12 @@ fn trapped_assets_can_be_claimed() {
 		assert_eq!(
 			last_events(2),
 			vec![
-				Event::XcmPallet(crate::Event::AssetsTrapped(hash.clone(), source, vma)),
-				Event::XcmPallet(crate::Event::Attempted(Outcome::Complete(
+				RuntimeEvent::XcmPallet(crate::PalletEvent::AssetsTrapped(
+					hash.clone(),
+					source,
+					vma
+				)),
+				RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Complete(
 					5 * BaseXcmWeight::get()
 				)))
 			]
@@ -590,7 +597,7 @@ fn trapped_assets_can_be_claimed() {
 		));
 		assert_eq!(
 			last_event(),
-			Event::XcmPallet(crate::Event::Attempted(Outcome::Incomplete(
+			RuntimeEvent::XcmPallet(crate::PalletEvent::Attempted(Outcome::Incomplete(
 				BaseXcmWeight::get(),
 				XcmError::UnknownClaim
 			)))
diff --git a/xcm/xcm-builder/tests/mock/mod.rs b/xcm/xcm-builder/tests/mock/mod.rs
index 9599efcd7f2..1eb51b7b24c 100644
--- a/xcm/xcm-builder/tests/mock/mod.rs
+++ b/xcm/xcm-builder/tests/mock/mod.rs
@@ -71,7 +71,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type BlockWeights = ();
 	type BlockLength = ();
@@ -97,7 +97,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type MaxLocks = MaxLocks;
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -180,7 +180,7 @@ impl xcm_executor::Config for XcmConfig {
 pub type LocalOriginToLocation = SignedToAccountId32<Origin, AccountId, KusamaNetwork>;
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type LocationInverter = LocationInverter<Ancestry>;
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = TestSendXcm;
diff --git a/xcm/xcm-builder/tests/scenarios.rs b/xcm/xcm-builder/tests/scenarios.rs
index d826e652c5d..50842f89929 100644
--- a/xcm/xcm-builder/tests/scenarios.rs
+++ b/xcm/xcm-builder/tests/scenarios.rs
@@ -89,7 +89,7 @@ fn transfer_asset_works() {
 			weight,
 		);
 		System::assert_last_event(
-			pallet_balances::Event::Transfer { from: ALICE, to: bob.clone(), amount }.into(),
+			pallet_balances::PalletEvent::Transfer { from: ALICE, to: bob.clone(), amount }.into(),
 		);
 		assert_eq!(r, Outcome::Complete(weight));
 		assert_eq!(Balances::free_balance(ALICE), INITIAL_BALANCE - amount);
diff --git a/xcm/xcm-executor/integration-tests/src/lib.rs b/xcm/xcm-executor/integration-tests/src/lib.rs
index a6673aca7a9..a470e5bfd52 100644
--- a/xcm/xcm-executor/integration-tests/src/lib.rs
+++ b/xcm/xcm-executor/integration-tests/src/lib.rs
@@ -66,18 +66,18 @@ fn basic_buy_fees_message_executes() {
 		.inspect_state(|| {
 			assert!(polkadot_test_runtime::System::events().iter().any(|r| matches!(
 				r.event,
-				polkadot_test_runtime::Event::Xcm(pallet_xcm::Event::Attempted(Outcome::Complete(
-					_
-				))),
+				polkadot_test_runtime::RuntimeEvent::Xcm(pallet_xcm::PalletEvent::Attempted(
+					Outcome::Complete(_)
+				)),
 			)));
 		});
 }
 
 #[test]
 fn query_response_fires() {
-	use pallet_test_notifier::Event::*;
+	use pallet_test_notifier::PalletEvent::*;
 	use pallet_xcm::QueryStatus;
-	use polkadot_test_runtime::Event::TestNotifier;
+	use polkadot_test_runtime::RuntimeEvent::TestNotifier;
 
 	sp_tracing::try_init_simple();
 	let mut client = TestClientBuilder::new()
@@ -146,7 +146,7 @@ fn query_response_fires() {
 		.inspect_state(|| {
 			assert!(polkadot_test_runtime::System::events().iter().any(|r| matches!(
 				r.event,
-				polkadot_test_runtime::Event::Xcm(pallet_xcm::Event::ResponseReady(
+				polkadot_test_runtime::RuntimeEvent::Xcm(pallet_xcm::PalletEvent::ResponseReady(
 					q,
 					Response::ExecutionResult(None),
 				)) if q == query_id,
@@ -163,8 +163,8 @@ fn query_response_fires() {
 
 #[test]
 fn query_response_elicits_handler() {
-	use pallet_test_notifier::Event::*;
-	use polkadot_test_runtime::Event::TestNotifier;
+	use pallet_test_notifier::PalletEvent::*;
+	use polkadot_test_runtime::RuntimeEvent::TestNotifier;
 
 	sp_tracing::try_init_simple();
 	let mut client = TestClientBuilder::new()
diff --git a/xcm/xcm-simulator/example/src/lib.rs b/xcm/xcm-simulator/example/src/lib.rs
index 741732cc797..1fb659b082f 100644
--- a/xcm/xcm-simulator/example/src/lib.rs
+++ b/xcm/xcm-simulator/example/src/lib.rs
@@ -135,10 +135,11 @@ mod tests {
 		});
 
 		ParaA::execute_with(|| {
-			use parachain::{Event, System};
-			assert!(System::events()
-				.iter()
-				.any(|r| matches!(r.event, Event::System(frame_system::Event::Remarked { .. }))));
+			use parachain::{RuntimeEvent, System};
+			assert!(System::events().iter().any(|r| matches!(
+				r.event,
+				RuntimeEvent::System(frame_system::PalletEvent::Remarked { .. })
+			)));
 		});
 	}
 
@@ -162,10 +163,11 @@ mod tests {
 		});
 
 		Relay::execute_with(|| {
-			use relay_chain::{Event, System};
-			assert!(System::events()
-				.iter()
-				.any(|r| matches!(r.event, Event::System(frame_system::Event::Remarked { .. }))));
+			use relay_chain::{RuntimeEvent, System};
+			assert!(System::events().iter().any(|r| matches!(
+				r.event,
+				RuntimeEvent::System(frame_system::PalletEvent::Remarked { .. })
+			)));
 		});
 	}
 
@@ -190,10 +192,11 @@ mod tests {
 		});
 
 		ParaB::execute_with(|| {
-			use parachain::{Event, System};
-			assert!(System::events()
-				.iter()
-				.any(|r| matches!(r.event, Event::System(frame_system::Event::Remarked { .. }))));
+			use parachain::{RuntimeEvent, System};
+			assert!(System::events().iter().any(|r| matches!(
+				r.event,
+				RuntimeEvent::System(frame_system::PalletEvent::Remarked { .. })
+			)));
 		});
 	}
 
diff --git a/xcm/xcm-simulator/example/src/parachain.rs b/xcm/xcm-simulator/example/src/parachain.rs
index 614d50e4fc6..984387e29e7 100644
--- a/xcm/xcm-simulator/example/src/parachain.rs
+++ b/xcm/xcm-simulator/example/src/parachain.rs
@@ -61,7 +61,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type BlockWeights = ();
 	type BlockLength = ();
@@ -87,7 +87,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type MaxLocks = MaxLocks;
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -156,7 +156,8 @@ pub mod mock_msg_queue {
 
 	#[pallet::config]
 	pub trait Config: frame_system::Config {
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 		type XcmExecutor: ExecuteXcm<Self::Call>;
 	}
 
@@ -187,7 +188,7 @@ pub mod mock_msg_queue {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		// XCMP
 		/// Some XCM was executed OK.
 		Success(Option<T::Hash>),
@@ -223,14 +224,15 @@ pub mod mock_msg_queue {
 				Ok(xcm) => {
 					let location = (1, Parachain(sender.into()));
 					match T::XcmExecutor::execute_xcm(location, xcm, max_weight) {
-						Outcome::Error(e) => (Err(e.clone()), Event::Fail(Some(hash), e)),
-						Outcome::Complete(w) => (Ok(w), Event::Success(Some(hash))),
+						Outcome::Error(e) => (Err(e.clone()), PalletEvent::Fail(Some(hash), e)),
+						Outcome::Complete(w) => (Ok(w), PalletEvent::Success(Some(hash))),
 						// As far as the caller is concerned, this was dispatched without error, so
 						// we just report the weight used.
-						Outcome::Incomplete(w, e) => (Ok(w), Event::Fail(Some(hash), e)),
+						Outcome::Incomplete(w, e) => (Ok(w), PalletEvent::Fail(Some(hash), e)),
 					}
 				},
-				Err(()) => (Err(XcmError::UnhandledXcmVersion), Event::BadVersion(Some(hash))),
+				Err(()) =>
+					(Err(XcmError::UnhandledXcmVersion), PalletEvent::BadVersion(Some(hash))),
 			};
 			Self::deposit_event(event);
 			result
@@ -271,15 +273,15 @@ pub mod mock_msg_queue {
 					VersionedXcm::<T::Call>::decode(&mut &data[..]).map(Xcm::<T::Call>::try_from);
 				match maybe_msg {
 					Err(_) => {
-						Self::deposit_event(Event::InvalidFormat(id));
+						Self::deposit_event(PalletEvent::InvalidFormat(id));
 					},
 					Ok(Err(())) => {
-						Self::deposit_event(Event::UnsupportedVersion(id));
+						Self::deposit_event(PalletEvent::UnsupportedVersion(id));
 					},
 					Ok(Ok(x)) => {
 						let outcome = T::XcmExecutor::execute_xcm(Parent, x.clone(), limit);
 						<ReceivedDmp<T>>::append(x);
-						Self::deposit_event(Event::ExecutedDownward(id, outcome));
+						Self::deposit_event(PalletEvent::ExecutedDownward(id, outcome));
 					},
 				}
 			}
@@ -289,14 +291,14 @@ pub mod mock_msg_queue {
 }
 
 impl mock_msg_queue::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type XcmExecutor = XcmExecutor<XcmConfig>;
 }
 
 pub type LocalOriginToLocation = SignedToAccountId32<Origin, AccountId, RelayNetwork>;
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type SendXcmOrigin = EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = XcmRouter;
 	type ExecuteXcmOrigin = EnsureXcmOrigin<Origin, LocalOriginToLocation>;
diff --git a/xcm/xcm-simulator/example/src/relay_chain.rs b/xcm/xcm-simulator/example/src/relay_chain.rs
index a648ba96ba7..e9e6fe7608e 100644
--- a/xcm/xcm-simulator/example/src/relay_chain.rs
+++ b/xcm/xcm-simulator/example/src/relay_chain.rs
@@ -52,7 +52,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type BlockWeights = ();
 	type BlockLength = ();
@@ -78,7 +78,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type MaxLocks = MaxLocks;
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -144,7 +144,7 @@ impl Config for XcmConfig {
 pub type LocalOriginToLocation = SignedToAccountId32<Origin, AccountId, KusamaNetwork>;
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = XcmRouter;
 	// Anyone can execute XCM messages locally...
@@ -166,7 +166,7 @@ parameter_types! {
 }
 
 impl ump::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink = ump::XcmSink<XcmExecutor<XcmConfig>, Runtime>;
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
 	type ExecuteOverweightOrigin = frame_system::EnsureRoot<AccountId>;
diff --git a/xcm/xcm-simulator/fuzzer/src/parachain.rs b/xcm/xcm-simulator/fuzzer/src/parachain.rs
index 3326875206b..b4c5abf14c7 100644
--- a/xcm/xcm-simulator/fuzzer/src/parachain.rs
+++ b/xcm/xcm-simulator/fuzzer/src/parachain.rs
@@ -61,7 +61,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type BlockWeights = ();
 	type BlockLength = ();
@@ -87,7 +87,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type MaxLocks = MaxLocks;
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -156,7 +156,8 @@ pub mod mock_msg_queue {
 
 	#[pallet::config]
 	pub trait Config: frame_system::Config {
-		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
+		type RuntimeEvent: From<PalletEvent<Self>>
+			+ IsType<<Self as frame_system::Config>::RuntimeEvent>;
 		type XcmExecutor: ExecuteXcm<Self::Call>;
 	}
 
@@ -187,7 +188,7 @@ pub mod mock_msg_queue {
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
-	pub enum Event<T: Config> {
+	pub enum PalletEvent<T: Config> {
 		// XCMP
 		/// Some XCM was executed OK.
 		Success(Option<T::Hash>),
@@ -223,14 +224,15 @@ pub mod mock_msg_queue {
 				Ok(xcm) => {
 					let location = MultiLocation::new(1, X1(Parachain(sender.into())));
 					match T::XcmExecutor::execute_xcm(location, xcm, max_weight) {
-						Outcome::Error(e) => (Err(e.clone()), Event::Fail(Some(hash), e)),
-						Outcome::Complete(w) => (Ok(w), Event::Success(Some(hash))),
+						Outcome::Error(e) => (Err(e.clone()), PalletEvent::Fail(Some(hash), e)),
+						Outcome::Complete(w) => (Ok(w), PalletEvent::Success(Some(hash))),
 						// As far as the caller is concerned, this was dispatched without error, so
 						// we just report the weight used.
-						Outcome::Incomplete(w, e) => (Ok(w), Event::Fail(Some(hash), e)),
+						Outcome::Incomplete(w, e) => (Ok(w), PalletEvent::Fail(Some(hash), e)),
 					}
 				},
-				Err(()) => (Err(XcmError::UnhandledXcmVersion), Event::BadVersion(Some(hash))),
+				Err(()) =>
+					(Err(XcmError::UnhandledXcmVersion), PalletEvent::BadVersion(Some(hash))),
 			};
 			Self::deposit_event(event);
 			result
@@ -271,15 +273,15 @@ pub mod mock_msg_queue {
 					VersionedXcm::<T::Call>::decode(&mut &data[..]).map(Xcm::<T::Call>::try_from);
 				match maybe_msg {
 					Err(_) => {
-						Self::deposit_event(Event::InvalidFormat(id));
+						Self::deposit_event(PalletEvent::InvalidFormat(id));
 					},
 					Ok(Err(())) => {
-						Self::deposit_event(Event::UnsupportedVersion(id));
+						Self::deposit_event(PalletEvent::UnsupportedVersion(id));
 					},
 					Ok(Ok(x)) => {
 						let outcome = T::XcmExecutor::execute_xcm(Parent, x.clone(), limit);
 						<ReceivedDmp<T>>::append(x);
-						Self::deposit_event(Event::ExecutedDownward(id, outcome));
+						Self::deposit_event(PalletEvent::ExecutedDownward(id, outcome));
 					},
 				}
 			}
@@ -289,14 +291,14 @@ pub mod mock_msg_queue {
 }
 
 impl mock_msg_queue::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type XcmExecutor = XcmExecutor<XcmConfig>;
 }
 
 pub type LocalOriginToLocation = SignedToAccountId32<Origin, AccountId, RelayNetwork>;
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type SendXcmOrigin = EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = XcmRouter;
 	type ExecuteXcmOrigin = EnsureXcmOrigin<Origin, LocalOriginToLocation>;
diff --git a/xcm/xcm-simulator/fuzzer/src/relay_chain.rs b/xcm/xcm-simulator/fuzzer/src/relay_chain.rs
index a648ba96ba7..e9e6fe7608e 100644
--- a/xcm/xcm-simulator/fuzzer/src/relay_chain.rs
+++ b/xcm/xcm-simulator/fuzzer/src/relay_chain.rs
@@ -52,7 +52,7 @@ impl frame_system::Config for Runtime {
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type BlockHashCount = BlockHashCount;
 	type BlockWeights = ();
 	type BlockLength = ();
@@ -78,7 +78,7 @@ parameter_types! {
 impl pallet_balances::Config for Runtime {
 	type MaxLocks = MaxLocks;
 	type Balance = Balance;
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type DustRemoval = ();
 	type ExistentialDeposit = ExistentialDeposit;
 	type AccountStore = System;
@@ -144,7 +144,7 @@ impl Config for XcmConfig {
 pub type LocalOriginToLocation = SignedToAccountId32<Origin, AccountId, KusamaNetwork>;
 
 impl pallet_xcm::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type SendXcmOrigin = xcm_builder::EnsureXcmOrigin<Origin, LocalOriginToLocation>;
 	type XcmRouter = XcmRouter;
 	// Anyone can execute XCM messages locally...
@@ -166,7 +166,7 @@ parameter_types! {
 }
 
 impl ump::Config for Runtime {
-	type Event = Event;
+	type RuntimeEvent = RuntimeEvent;
 	type UmpSink = ump::XcmSink<XcmExecutor<XcmConfig>, Runtime>;
 	type FirstMessageFactorPercent = FirstMessageFactorPercent;
 	type ExecuteOverweightOrigin = frame_system::EnsureRoot<AccountId>;
